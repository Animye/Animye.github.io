<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Animye的博客</title>
  
  <subtitle>你还有很多未完成的梦，还有什么理由停下脚步......</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-20T03:33:34.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Animye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目中常用的代码</title>
    <link href="http://yoursite.com/2020/01/20/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2020/01/20/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81/</id>
    <published>2020-01-20T02:32:56.000Z</published>
    <updated>2020-01-20T03:33:34.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="对象的合并和拷贝"><a href="#对象的合并和拷贝" class="headerlink" title="对象的合并和拷贝"></a>对象的合并和拷贝</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果健名相同后面的覆盖前面的</span></span><br><span class="line"><span class="built_in">Object</span>.assign(form, obj)-----&gt;<span class="built_in">Object</span>.assign(目标对象, 被合并的对象)</span><br><span class="line"><span class="comment">//如果不想修改目标对象，可以将目标对象改成空 &#123;&#125;，</span></span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;,form, obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的扩展运算符实现拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">'乔巴'</span>,<span class="attr">age</span>:<span class="string">'18'</span>,<span class="attr">type</span>:&#123;<span class="attr">name</span>:<span class="string">'驯鹿'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在此多补充一下对象的扩展运算符的用法：</span></span><br><span class="line"> <span class="comment">// 2.添加属性</span></span><br><span class="line">    <span class="keyword">let</span> obj3 = &#123;...obj,<span class="attr">color</span>:<span class="string">'brown'</span>&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj3)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.修改属性（即使是引用类型，也不会影响原来的值）</span></span><br><span class="line">    <span class="keyword">let</span> obj4 = &#123;...obj,<span class="attr">type</span>:&#123;<span class="attr">name</span>:<span class="string">'梅花鹿'</span>&#125;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj4)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 数组的拷贝</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">let</span> arr1 = [...arr]</span><br><span class="line">    <span class="built_in">console</span>.log(arr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.parse 实现深拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">'乔巴'</span>,<span class="attr">age</span>:<span class="string">'18'</span>,<span class="attr">type</span>:&#123;<span class="attr">name</span>:<span class="string">'驯鹿'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> deepObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj ))</span><br></pre></td></tr></table></figure><h3 id="数组的合并去重"><a href="#数组的合并去重" class="headerlink" title="数组的合并去重"></a>数组的合并去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并</span></span><br><span class="line">xxx.concat();</span><br><span class="line">[...a, ...b];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line">[...new <span class="built_in">Set</span>(xx)];</span><br></pre></td></tr></table></figure><h3 id="json-转换"><a href="#json-转换" class="headerlink" title="json 转换"></a>json 转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(）</span><br><span class="line"><span class="comment">//存</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(）</span><br></pre></td></tr></table></figure><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">'名'</span>） <span class="comment">//取</span></span><br><span class="line">localStorage.setItem(<span class="string">'名'</span>,<span class="string">'值'</span>）<span class="comment">//存</span></span><br></pre></td></tr></table></figure><h3 id="缩减代码"><a href="#缩减代码" class="headerlink" title="缩减代码"></a>缩减代码</h3><p>(a || b) === (() =&gt; { if (a) {return a;} else {return b} })() === (a ? a : b)<br>(a &amp;&amp; b) === (() =&gt; { if (a) {return b;} else {return a} })() === (a ? b : a)</p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ul><li>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="解决路由报错"><a href="#解决路由报错" class="headerlink" title="解决路由报错"></a>解决路由报错</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalPush = Router.prototype.push;</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123; <span class="attr">xxx</span>: &#123; handler(newVal, oldVel) &#123;&#125;, <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">immediate</span>: <span class="literal">true</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h2><p><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">官网</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.xxx = lodash.throttle(<span class="keyword">this</span>.xxx, <span class="number">1000</span>); <span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">this</span>.xxx = lodash.debounce(<span class="keyword">this</span>.xxx, <span class="number">300</span>); <span class="comment">// 防抖动</span></span><br><span class="line">difference();</span><br><span class="line">_.difference([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// =&gt; [3, 1]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js&quot;&gt;&lt;a href=&quot;#js&quot; class=&quot;headerlink&quot; title=&quot;js&quot;&gt;&lt;/a&gt;js&lt;/h2&gt;&lt;h3 id=&quot;对象的合并和拷贝&quot;&gt;&lt;a href=&quot;#对象的合并和拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象的合并和拷贝&quot;&gt;&lt;/a&gt;对象的合并和拷贝&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="常用" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Object.keys方法之详解</title>
    <link href="http://yoursite.com/2019/12/03/Object-keys%E6%96%B9%E6%B3%95%E4%B9%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/12/03/Object-keys%E6%96%B9%E6%B3%95%E4%B9%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-12-03T10:57:23.000Z</published>
    <updated>2020-01-20T01:49:10.236Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/weixin_43675447/article/details/99232258" target="_blank" rel="noopener">参考地址</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"></span><br><span class="line">参数：要返回其枚举自身属性的对象</span><br><span class="line"></span><br><span class="line">返回值：一个表示给定对象的所有可枚举属性的字符串数组</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="处理对象，返回可枚举的属性数组"><a href="#处理对象，返回可枚举的属性数组" class="headerlink" title="处理对象，返回可枚举的属性数组"></a>处理对象，返回可枚举的属性数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">address</span>: <span class="string">"深圳"</span>, <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(person); <span class="comment">// ["name", "age", "address","getName"]</span></span><br></pre></td></tr></table></figure><h2 id="处理数组，返回索引值数组"><a href="#处理数组，返回索引值数组" class="headerlink" title="处理数组，返回索引值数组"></a>处理数组，返回索引值数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(arr); <span class="comment">// ["0", "1", "2", "3", "4", "5"]</span></span><br></pre></td></tr></table></figure><h2 id="处理字符串，返回索引值数组"><a href="#处理字符串，返回索引值数组" class="headerlink" title="处理字符串，返回索引值数组"></a>处理字符串，返回索引值数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"saasd 字符串"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(str); <span class="comment">// ["0", "1", "2", "3", "4", "5", "6", "7"]</span></span><br></pre></td></tr></table></figure><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">address</span>: <span class="string">"深圳"</span>, <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(person).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  person[key]; <span class="comment">// 获取到属性对应的值，做一些处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Object-values-和-Object-keys-是相反的操作，把一个对象的值转换为数组"><a href="#Object-values-和-Object-keys-是相反的操作，把一个对象的值转换为数组" class="headerlink" title="Object.values()和 Object.keys()是相反的操作，把一个对象的值转换为数组"></a>Object.values()和 Object.keys()是相反的操作，把一个对象的值转换为数组</h2><h2 id="使用-Object-values-将-N-个类似的数据合并成一个"><a href="#使用-Object-values-将-N-个类似的数据合并成一个" class="headerlink" title="使用 Object.values() 将 N 个类似的数据合并成一个"></a>使用 Object.values() 将 N 个类似的数据合并成一个</h2><p><a href="https://segmentfault.com/q/1010000015569060" target="_blank" rel="noopener">参考资料</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = [</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">"问题1"</span>, <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">content</span>: <span class="string">"A"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">"问题1"</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"B"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">"问题1"</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">"C"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">"问题2"</span>, <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">"D"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">"问题3"</span>, <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">content</span>: <span class="string">"E"</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">source.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isHaveObj = obj[e.title];</span><br><span class="line">  <span class="keyword">if</span> (isHaveObj) &#123;</span><br><span class="line">    isHaveObj.totalId.push(&#123; <span class="attr">id</span>: e.id &#125;);</span><br><span class="line">    isHaveObj.content.push(e.content);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[e.title] = &#123;</span><br><span class="line">      title: e.title,</span><br><span class="line">      totalId: [&#123; <span class="attr">id</span>: e.id &#125;],</span><br><span class="line">      content: [e.content]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> source) &#123;</span><br><span class="line">  <span class="keyword">const</span> model = result.some(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.title == i.title) &#123;</span><br><span class="line">      e.index++;</span><br><span class="line">      e.all.push(&#123;</span><br><span class="line">        content: i.content,</span><br><span class="line">        id: i.id</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e.title == i.title;</span><br><span class="line">  &#125;);</span><br><span class="line">  model ||</span><br><span class="line">    result.push(&#123;</span><br><span class="line">      title: i.title,</span><br><span class="line">      index: <span class="number">1</span>,</span><br><span class="line">      all: [&#123; <span class="attr">content</span>: i.content, <span class="attr">id</span>: i.id &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/q/1010000019160603" target="_blank" rel="noopener">参考资料</a></p><p>(a || b) === (() =&gt; { if (a) {return a;} else {return b} })() === (a ? a : b)</p><p>(a &amp;&amp; b) === (() =&gt; { if (a) {return b;} else {return a} })() === (a ? b : a)</p><h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h2><ul><li>Object.entries 方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历对象的属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  one: <span class="number">1</span>,</span><br><span class="line">  two: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(k)&#125;</span> : <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(v)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43675447/article/details/99232258&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参数：要返回其枚举自身属性的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回值：一个表示给定对象的所有可枚举属性的字符串数组&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue中mixins的使用方法</title>
    <link href="http://yoursite.com/2019/12/03/vue%E4%B8%ADmixins%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/12/03/vue%E4%B8%ADmixins%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2019-12-03T01:21:20.000Z</published>
    <updated>2019-12-03T09:53:48.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mixins-基础概况"><a href="#mixins-基础概况" class="headerlink" title="mixins 基础概况"></a>mixins 基础概况</h2><ul><li>混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</li></ul><a id="more"></a><h2 id="mixins-的特点"><a href="#mixins-的特点" class="headerlink" title="mixins 的特点"></a>mixins 的特点</h2><ol><li>方法和参数在各组件中不共享</li><li>值为对象的选项，如 methods,components 等，选项会被合并，键冲突的组件会覆盖混入对象的</li><li>值为函数的选项，如 created,mounted 等，就会被合并调用，混合对象里的钩子函数在组件里的钩子函数之前调用</li></ol><h2 id="mixins-和其他的区别"><a href="#mixins-和其他的区别" class="headerlink" title="mixins 和其他的区别"></a>mixins 和其他的区别</h2><h3 id="与-vuex-的区别"><a href="#与-vuex-的区别" class="headerlink" title="与 vuex 的区别"></a>与 vuex 的区别</h3><p>经过上面的例子之后，他们之间的区别应该很明显了哈~</p><ul><li><p>vuex：用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。</p></li><li><p>Mixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</p></li></ul><h3 id="与公共组件的区别"><a href="#与公共组件的区别" class="headerlink" title="与公共组件的区别"></a>与公共组件的区别</h3><p>同样明显的区别来再列一遍哈~</p><ul><li><p>组件：在父组件中引入组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据 props 来传值，但本质上两者是相对独立的。</p></li><li><p>Mixins：则是在引入组件之后与组件中的对象和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mixins-基础概况&quot;&gt;&lt;a href=&quot;#mixins-基础概况&quot; class=&quot;headerlink&quot; title=&quot;mixins 基础概况&quot;&gt;&lt;/a&gt;mixins 基础概况&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数组includes方法</title>
    <link href="http://yoursite.com/2019/11/28/%E6%95%B0%E7%BB%84includes%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/28/%E6%95%B0%E7%BB%84includes%E6%96%B9%E6%B3%95/</id>
    <published>2019-11-28T00:49:37.000Z</published>
    <updated>2019-12-28T00:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="借助-includes-方法求两个数组的交集（适用于对象数组）"><a href="#借助-includes-方法求两个数组的交集（适用于对象数组）" class="headerlink" title="借助 includes()方法求两个数组的交集（适用于对象数组）"></a>借助 includes()方法求两个数组的交集（适用于对象数组）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">s</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">4</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">5</span> &#125;].map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(item));</span><br><span class="line"><span class="keyword">var</span> b = [&#123; <span class="attr">s</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">4</span> &#125;, <span class="string">"a"</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diff = a.filter(<span class="function"><span class="params">v</span> =&gt;</span> b.includes(v)).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.parse(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">// diff: [&#123;s: 3&#125;,&#123;s: 4&#125;]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="借助-includes-方法求两个数组的差集（适用于对象数组）"><a href="#借助-includes-方法求两个数组的差集（适用于对象数组）" class="headerlink" title="借助 includes()方法求两个数组的差集（适用于对象数组）"></a>借助 includes()方法求两个数组的差集（适用于对象数组）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">s</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">4</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">5</span> &#125;].map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(item));</span><br><span class="line"><span class="keyword">var</span> b = [&#123; <span class="attr">s</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">3</span> &#125;, &#123; <span class="attr">s</span>: <span class="number">4</span> &#125;, <span class="string">"a"</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(item));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diff = a</span><br><span class="line">  .concat(b)</span><br><span class="line">  .filter(<span class="function"><span class="params">v</span> =&gt;</span> !a.includes(v) || !b.includes(v))</span><br><span class="line">  .map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.parse(item));</span><br><span class="line"></span><br><span class="line"><span class="comment">// diff: [1, 2, &#123;s:5&#125;, &#123;s:2&#125;, "a"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].includes(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].includes(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].includes(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].includes(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;].includes(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;借助-includes-方法求两个数组的交集（适用于对象数组）&quot;&gt;&lt;a href=&quot;#借助-includes-方法求两个数组的交集（适用于对象数组）&quot; class=&quot;headerlink&quot; title=&quot;借助 includes()方法求两个数组的交集（适用于对象数组）&quot;&gt;&lt;/a&gt;借助 includes()方法求两个数组的交集（适用于对象数组）&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &amp;#125;].map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = [&amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;s&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;, &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;].map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; diff = a.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; b.includes(v)).map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// diff: [&amp;#123;s: 3&amp;#125;,&amp;#123;s: 4&amp;#125;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vuetify</title>
    <link href="http://yoursite.com/2019/11/12/vuetify/"/>
    <id>http://yoursite.com/2019/11/12/vuetify/</id>
    <published>2019-11-12T07:44:04.000Z</published>
    <updated>2019-12-02T11:08:49.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vuetify-使用方法"><a href="#vuetify-使用方法" class="headerlink" title="vuetify 使用方法"></a>vuetify 使用方法</h2><h3 id="Vue-引入-vuetify-框架"><a href="#Vue-引入-vuetify-框架" class="headerlink" title="Vue 引入 vuetify 框架"></a>Vue 引入 vuetify 框架</h3><h4 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h4><ol><li><code>npm install vuetify --save</code></li></ol><a id="more"></a><h4 id="在-main-js-中修改"><a href="#在-main-js-中修改" class="headerlink" title="在 main.js 中修改"></a>在 main.js 中修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuetify <span class="keyword">from</span> <span class="string">"vuetify"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"vuetify/dist/vuetify.min.css"</span>;</span><br><span class="line">Vue.use(Vuetify);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  vuetify: <span class="keyword">new</span> Vuetify(),</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">"&lt;App/&gt;"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="引入对应-icon-的-mdi"><a href="#引入对应-icon-的-mdi" class="headerlink" title="引入对应 icon 的 mdi"></a>引入对应 icon 的 mdi</h4><ol><li><code>npm install @mdi/font D</code></li></ol><h4 id="在-main-js-中修改-1"><a href="#在-main-js-中修改-1" class="headerlink" title="在 main.js 中修改"></a>在 main.js 中修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@mdi/font/css/materialdesignicons.css"</span>;</span><br></pre></td></tr></table></figure><h4 id="方法二：-请注意，这不是官方的-Google-存储库，可能无法接收更新"><a href="#方法二：-请注意，这不是官方的-Google-存储库，可能无法接收更新" class="headerlink" title="方法二：(请注意，这不是官方的 Google 存储库，可能无法接收更新)"></a>方法二：(请注意，这不是官方的 Google 存储库，可能无法接收更新)</h4><p><code>npm install material-design-icons-iconfont -D</code></p><ul><li>在 main.js 中引入 <code>import &#39;material-design-icons-iconfont/dist/material-design-icons.css&#39;</code></li></ul><h4 id="vuetify-使用时遇到的坑默认颜色显示不了"><a href="#vuetify-使用时遇到的坑默认颜色显示不了" class="headerlink" title="vuetify 使用时遇到的坑默认颜色显示不了"></a>vuetify 使用时遇到的坑默认颜色显示不了</h4><ul><li>解决方法:在 App.vue 中：加上 v-app 就正常显示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-app&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;<span class="regexp">/v-app&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vuetify-使用方法&quot;&gt;&lt;a href=&quot;#vuetify-使用方法&quot; class=&quot;headerlink&quot; title=&quot;vuetify 使用方法&quot;&gt;&lt;/a&gt;vuetify 使用方法&lt;/h2&gt;&lt;h3 id=&quot;Vue-引入-vuetify-框架&quot;&gt;&lt;a href=&quot;#Vue-引入-vuetify-框架&quot; class=&quot;headerlink&quot; title=&quot;Vue 引入 vuetify 框架&quot;&gt;&lt;/a&gt;Vue 引入 vuetify 框架&lt;/h3&gt;&lt;h4 id=&quot;命令行安装&quot;&gt;&lt;a href=&quot;#命令行安装&quot; class=&quot;headerlink&quot; title=&quot;命令行安装&quot;&gt;&lt;/a&gt;命令行安装&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install vuetify --save&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>flutter</title>
    <link href="http://yoursite.com/2019/08/13/flutter/"/>
    <id>http://yoursite.com/2019/08/13/flutter/</id>
    <published>2019-08-13T07:32:48.000Z</published>
    <updated>2019-12-02T11:08:49.592Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="flutter-简介"><a href="#flutter-简介" class="headerlink" title="flutter 简介"></a>flutter 简介</h2><ul><li>Flutter 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在 iOS 和 Android 平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加 native 扩展。同时 Flutter 还使用 Native 引擎渲染视图，这无疑能为用户提供良好的体验。<a id="more"></a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://book.flutterchina.club/chapter1/install_flutter.html" target="_blank" rel="noopener">参考地址</a><br><a href="https://www.jianshu.com/p/7cbf82b4854e" target="_blank" rel="noopener">参考地址 2</a></p><ol><li>下载 flutter SDK：<a href="https://github.com/flutter/flutter.git" target="_blank" rel="noopener">git clone</a></li></ol><p>镜像服务地址：<br>mac/linux<br>export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn" target="_blank" rel="noopener">https://pub.flutter-io.cn</a><br>export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn" target="_blank" rel="noopener">https://storage.flutter-io.cn</a><br>windows<br>PUB_HOSTED_URL <a href="https://pub.flutter-io.cn" target="_blank" rel="noopener">https://pub.flutter-io.cn</a><br>FLUTTER_STORAGE_BASE_URL <a href="https://storage.flutter-io.cn" target="_blank" rel="noopener">https://storage.flutter-io.cn</a></p><ol start="2"><li>运行 flutter doctor</li><li>创建项目 flutter create myflutter</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flutter-简介&quot;&gt;&lt;a href=&quot;#flutter-简介&quot; class=&quot;headerlink&quot; title=&quot;flutter 简介&quot;&gt;&lt;/a&gt;flutter 简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Flutter 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在 iOS 和 Android 平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加 native 扩展。同时 Flutter 还使用 Native 引擎渲染视图，这无疑能为用户提供良好的体验。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>scroll</title>
    <link href="http://yoursite.com/2019/08/09/scroll/"/>
    <id>http://yoursite.com/2019/08/09/scroll/</id>
    <published>2019-08-09T00:59:21.000Z</published>
    <updated>2019-12-02T11:47:42.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="获取滚动条的位置"><a href="#获取滚动条的位置" class="headerlink" title="获取滚动条的位置"></a>获取滚动条的位置</h2><h3 id="在-VUE-中获取滚动条的位置存到-sessionStorage-中，刷新页面从-sessionStorage-中取出来"><a href="#在-VUE-中获取滚动条的位置存到-sessionStorage-中，刷新页面从-sessionStorage-中取出来" class="headerlink" title="在 VUE 中获取滚动条的位置存到 sessionStorage 中，刷新页面从 sessionStorage 中取出来"></a>在 VUE 中获取滚动条的位置存到 sessionStorage 中，刷新页面从 sessionStorage 中取出来</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="comment">// right 是自己写的dom节点的名字</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.right.addEventListener(<span class="string">"scroll"</span>, <span class="keyword">this</span>.handleScroll, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$route.path === <span class="string">"/safe/lien/system/41"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.right.scrollTo(<span class="number">0</span>, (sessionStorage.safeLienSystem = <span class="number">0</span>), <span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.right.scrollTo(<span class="number">0</span>, sessionStorage.safeLienSystem, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  handleScroll(e) &#123;</span><br><span class="line">    sessionStorage.safeLienSystem = e.target.scrollTop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取滚动条的位置&quot;&gt;&lt;a href=&quot;#获取滚动条的位置&quot; class=&quot;headerlink&quot; title=&quot;获取滚动条的位置&quot;&gt;&lt;/a&gt;获取滚动条的位置&lt;/h2&gt;&lt;h3 id=&quot;在-VUE-中获取滚动条的位置存到-sessionStorage-中，刷新页面从-sessionStorage-中取出来&quot;&gt;&lt;a href=&quot;#在-VUE-中获取滚动条的位置存到-sessionStorage-中，刷新页面从-sessionStorage-中取出来&quot; class=&quot;headerlink&quot; title=&quot;在 VUE 中获取滚动条的位置存到 sessionStorage 中，刷新页面从 sessionStorage 中取出来&quot;&gt;&lt;/a&gt;在 VUE 中获取滚动条的位置存到 sessionStorage 中，刷新页面从 sessionStorage 中取出来&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoursite.com/2019/08/01/es6/"/>
    <id>http://yoursite.com/2019/08/01/es6/</id>
    <published>2019-08-01T03:47:07.000Z</published>
    <updated>2019-12-02T11:08:49.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6-含义"><a href="#ES6-含义" class="headerlink" title="ES6 含义"></a>ES6 含义</h2><ul><li>ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</li></ul><a id="more"></a><p><a href="https://www.jianshu.com/p/cfb0893c34f1" target="_blank" rel="noopener">es6 学习地址</a><br><a href="https://www.jianshu.com/p/fe5f173276bd" target="_blank" rel="noopener">promise 学习地址</a><br><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">阮一峰 es6</a></p><h2 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h2><ul><li>Set 结构的实例有以下属性。</li></ul><p><code>Set.prototype.constructor：构造函数，默认就是Set函数。</code><br><code>Set.prototype.size：返回Set实例的成员总数。</code><br><code>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</code></p><p><code>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</code><br><code>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</code><br><code>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</code><br><code>Set.prototype.clear()：清除所有成员，没有返回值。</code><br><code>Array.from方法可以将 Set 结构转为数组。</code></p><ul><li>遍历操作<br>Set 结构的实例有四个遍历方法，可以用于遍历成员。</li></ul><p>Set.prototype.keys()：返回键名的遍历器<br>Set.prototype.values()：返回键值的遍历器<br>Set.prototype.entries()：返回键值对的遍历器<br>Set.prototype.forEach()：使用回调函数遍历每个成员<br><strong>由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以 keys 方法和 values 方法的行为完全一致。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6-含义&quot;&gt;&lt;a href=&quot;#ES6-含义&quot; class=&quot;headerlink&quot; title=&quot;ES6 含义&quot;&gt;&lt;/a&gt;ES6 含义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>API接口</title>
    <link href="http://yoursite.com/2019/07/26/API%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2019/07/26/API%E6%8E%A5%E5%8F%A3/</id>
    <published>2019-07-26T03:20:00.000Z</published>
    <updated>2019-12-02T11:08:49.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>做软件，需要服务器，需要后台，对于一些小的开发者，想赚点广告费而又不想做后台使用服务器的人来说，网上提供了一些免费的接口，可以供我们使用，提供了许多数据。在这里我分享两个不错的提供 WEB 服务的网站。<a id="more"></a></li></ul><h3 id="WebXml"><a href="#WebXml" class="headerlink" title="WebXml"></a>WebXml</h3><p>Web Service（WEB 服务）能够快捷和方便地综合并结合各种系统、商务和任何应用平台。新出现的 Web Services 标准： SOAP、WSDL 和 UDDI 能够使任何系统和系统之间的应用变为更加方便和廉价。</p><p>这个 WebXml 提供了很多免费的接口，当然对于次数有点限制，可是对于我们个人开发者来说，这个限制不算什么，免费足够用了。<br><a href="http://www.webxml.com.cn" target="_blank" rel="noopener">地址</a></p><h3 id="聚合数据"><a href="#聚合数据" class="headerlink" title="聚合数据"></a>聚合数据</h3><p>聚合数据是一个为智能手机开发者，网站站长，移动设备开发人员及图商提供原始数据 API 服务的综合性云数据平台。包含手机聚合，网站聚合，LBS 聚合三部分，其功能类似于 Google APIS。</p><p>聚合数据提供的接口非常好，个人非常喜欢聚合数据里提供的接口，非常的实用，不过缺点是大部分的接口都是收费的，但是好消息是，自从九月初开始聚合数据逐步将非充值类接口变成了永久免费，第一批免费 50 类接口。里面有很多不错内容的接口。<br><a href="http://free.juhe.cn" target="_blank" rel="noopener">地址</a></p><h3 id="免费又简单的开发后台"><a href="#免费又简单的开发后台" class="headerlink" title="免费又简单的开发后台"></a>免费又简单的开发后台</h3><p>个人比较欣赏的一个开发后台提供者是 Bmob:</p><h3 id="申请第三方开放平台的账号"><a href="#申请第三方开放平台的账号" class="headerlink" title="申请第三方开放平台的账号"></a>申请第三方开放平台的账号</h3><p><a href="http://open.weibo.com" target="_blank" rel="noopener">微博开放平台</a><br><a href="https://open.weixin.qq.com" target="_blank" rel="noopener">微信开放平台</a><br><a href="https://connect.qq.com" target="_blank" rel="noopener">qq 互联平台</a><br>注 1、 申请 QQ 登录一定要在 QQ 互联平台，不是在 QQ 开放平台（open.qq.com）</p><p>注 2、 申请过程中可能需要企业相关资质，如法人身份证、营业执照、税务登记证等，需要提前准备好。</p><p>注 3、 提交应用申请时，需要提交应用相关的信息（应用名称、介绍、图标、截图、授权回调域等）,微信还需要提交《微信开放平台网站信息登记表》</p><p>注 4、 建议大家用企业账号申请第三方开放平台，不要使用个人的 QQ、微信、微博和邮箱进行申请，这样可以避免申请人在职位变动或者离职后，导致账号管理的风险和交接麻烦。</p><p>注 5、 开放平台申请多数需要审核流程，因此在项目开始时，建议首先申请开放平台账号和创建应用，以免申请时间长影响开发进度。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;做软件，需要服务器，需要后台，对于一些小的开发者，想赚点广告费而又不想做后台使用服务器的人来说，网上提供了一些免费的接口，可以供我们使用，提供了许多数据。在这里我分享两个不错的提供 WEB 服务的网站。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Viewport</title>
    <link href="http://yoursite.com/2019/07/26/Viewport/"/>
    <id>http://yoursite.com/2019/07/26/Viewport/</id>
    <published>2019-07-26T02:31:49.000Z</published>
    <updated>2019-12-02T11:08:49.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.cnblogs.com/axl234/p/8871794.html" target="_blank" rel="noopener">参考文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>lodash</title>
    <link href="http://yoursite.com/2019/07/26/lodash/"/>
    <id>http://yoursite.com/2019/07/26/lodash/</id>
    <published>2019-07-26T02:04:57.000Z</published>
    <updated>2019-12-02T11:08:49.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Lodash 就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 ECMAScript 尚未制订的规范，但同时被业界所认可的辅助函数。</li></ul><p><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">官网</a></p><h2 id="模块的组成"><a href="#模块的组成" class="headerlink" title="模块的组成"></a>模块的组成</h2><p>Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作<br>Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作<br>Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</p><a id="more"></a><p>Lang， 普遍适用于各种类型，常用于执行类型判断和类型转换<br>Math， 使用与数值类型，常用于执行数学运算<br>Number， 适用于生成随机数，比较数值与数值区间的关系<br>Object， 适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作<br>Seq， 常用于创建链式调用，提高执行性能（惰性计算）<br>String， 适用于字符串类型<br>lodash/fp 模块提供了更接近函数式编程的开发方法，其内部的函数经过包装，具有 immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。<br>Fixed Arity，固化参数个数，便于柯里化<br>Rearragned Arguments， 重新调整参数位置，便于函数之间的聚合<br>Capped Iteratee Argument， 封装 Iteratee 参数</p><h2 id="在-vue-中使用"><a href="#在-vue-中使用" class="headerlink" title="在 vue 中使用"></a>在 vue 中使用</h2><h3 id="使用-npm-安装"><a href="#使用-npm-安装" class="headerlink" title="使用 npm 安装"></a>使用 npm 安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lodash</span><br><span class="line">npm install --save-dev babel-plugin-lodash</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'lodash/fp'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addOne = add(<span class="number">1</span>);</span><br><span class="line">_.map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], addOne);</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/e0yu/p/10843420.html" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Lodash 就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 ECMAScript 尚未制订的规范，但同时被业界所认可的辅助函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lodashjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;模块的组成&quot;&gt;&lt;a href=&quot;#模块的组成&quot; class=&quot;headerlink&quot; title=&quot;模块的组成&quot;&gt;&lt;/a&gt;模块的组成&lt;/h2&gt;&lt;p&gt;Array， 适合于数组类型，比如填充数据、查找元素、数组分片等操作&lt;br&gt;Collocation， 适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作&lt;br&gt;Function， 适用于函数类型，比如节流、延迟、缓存、设置钩子等操作&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>function</title>
    <link href="http://yoursite.com/2019/07/25/function/"/>
    <id>http://yoursite.com/2019/07/25/function/</id>
    <published>2019-07-25T01:16:32.000Z</published>
    <updated>2019-12-02T11:08:49.592Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的防抖和节流"><a href="#函数的防抖和节流" class="headerlink" title="函数的防抖和节流"></a>函数的防抖和节流</h3><p><a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">参考资料 1</a><br><a href="https://blog.csdn.net/duola8789/article/details/78871789" target="_blank" rel="noopener">参考资料 2</a><br><a href="https://www.jianshu.com/p/f9f6b637fd6c" target="_blank" rel="noopener">参考资料 3</a></p>  <a id="more"></a><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><ul><li>概念：就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。<br>打个比方，坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125; func        传入函数，最后一个参数是额外增加的this对象，.apply(this, args) 这种方式，this无法传递进函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125;  immediate   设置为ture时，调用触发于开始边界而不是结束边界</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, args, context, timestamp, result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 据上一次触发时间间隔</span></span><br><span class="line">    <span class="keyword">let</span> last = <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()) - timestamp</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上次被包装函数被调用时间间隔last小于设定时间间隔wait</span></span><br><span class="line">    <span class="keyword">if</span> (last &lt; wait &amp;&amp; last &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      timeout = setTimeout(later, wait - last)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">        result = func.call(context, ...args, context)</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">          context = args = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">..._args</span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = _args</span><br><span class="line">    timestamp = <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    <span class="keyword">const</span> callNow = immediate &amp;&amp; !timeout</span><br><span class="line">    <span class="comment">// 如果延时不存在，重新设定延时</span></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = setTimeout(later, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">      result = func.call(context, ...args, context)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><ul><li>概念：所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。</li><li>举个例子，乘坐地铁，过闸机时，每个人进入后 3 秒后门关闭，等待下一个人进入。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125;   func      传入函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;object&#125;     options   如果想忽略开始边界上的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾边界上的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context, args, result</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 上次执行时间点</span></span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;</span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">let</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 若设定了开始边界不执行选项，上次执行时间始终为0</span></span><br><span class="line">    previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">    result = func.apply(context, args)</span><br><span class="line">    <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">..._args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    <span class="comment">// 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。</span></span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now</span><br><span class="line">    <span class="comment">// 延迟执行时间间隔</span></span><br><span class="line">    <span class="keyword">let</span> remaining = wait - (now - previous)</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = _args</span><br><span class="line">    <span class="comment">// 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口</span></span><br><span class="line">    <span class="comment">// remaining大于时间窗口wait，表示客户端系统时间被调整过</span></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      clearTimeout(timeout)</span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">      previous = now</span><br><span class="line">      result = func.apply(context, args)</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span></span><br><span class="line">      <span class="comment">//如果延迟执行不存在，且没有设定结尾边界不执行选项</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      timeout = setTimeout(later, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><h4 id="return-和-return-false-的区别"><a href="#return-和-return-false-的区别" class="headerlink" title="return 和 return false 的区别"></a>return 和 return false 的区别</h4><ol><li>return;返回 null，起到中断方法执行的效果，只要不 return false 事件处理函数将会继续执行，表单将提交</li><li>return false;，事件处理函数会取消事件，不再继续向下执行。比如表单将终止提交</li></ol><ul><li>retrun true； 返回正确的处理结果。</li><li>return false；返回错误的处理结果，终止处理。</li><li>return；把控制权返回给页面。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数的防抖和节流&quot;&gt;&lt;a href=&quot;#函数的防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;函数的防抖和节流&quot;&gt;&lt;/a&gt;函数的防抖和节流&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/c8b86b09daf0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考资料 1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/duola8789/article/details/78871789&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考资料 2&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/f9f6b637fd6c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考资料 3&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>构造函数</title>
    <link href="http://yoursite.com/2019/07/23/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/07/23/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2019-07-23T02:51:45.000Z</published>
    <updated>2019-12-02T11:08:49.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是构造函数"><a href="#什么是构造函数" class="headerlink" title="什么是构造函数"></a>什么是构造函数</h2><ul><li>在 JavaScript 中，用 new 关键字来调用的函数，称为构造函数<a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是构造函数&quot;&gt;&lt;a href=&quot;#什么是构造函数&quot; class=&quot;headerlink&quot; title=&quot;什么是构造函数&quot;&gt;&lt;/a&gt;什么是构造函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 JavaScript 中，用 new 关键字来调用的函数，称为构造函数&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/2019/07/23/vue/"/>
    <id>http://yoursite.com/2019/07/23/vue/</id>
    <published>2019-07-23T02:04:08.000Z</published>
    <updated>2020-01-20T03:25:52.722Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue-项目介绍"><a href="#vue-项目介绍" class="headerlink" title="vue 项目介绍"></a>vue 项目介绍</h2><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>只要是后缀名为 .vue 的文件都称为组件，可以把组件理解成之前 html 内的某个 div，整个 vue 项目就是由很多小的组件组合的。<br>组件可以复用。组件的名称都是大写字母开头的，或者大驼峰方式 例如:HeaderTop</p>   <a id="more"></a><p>组件内有三个标签</p><ol><li><code>tempate</code> (必须)：div 的结构</li><li><code>script</code></li><li><code>style</code> ： 结构的样式</li></ol><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>使用官方提供的脚手架 vue-cli ,版本是 2.x</p><ul><li><code>npm install -g vue-cli</code></li><li><code>vue init webpack my-project</code></li><li>配置<br>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写<br>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。<br>Author：作者，如果你有配置 git 的作者，他会读取。<br>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 y<br>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配<br>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。<br>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n</li></ul><p>使用官方提供的脚手架 vue-cli ,版本是 3.x</p><ul><li>使用命名 <code>npm i -g @vue/cli</code> 全局安装一个 vue 命令</li><li>使用 <code>vue create projectName</code> 新建一个 vue 项目了</li></ul><h4 id="针对-vue-命令创建出来的-vue-项目，改版成一个-hello-world"><a href="#针对-vue-命令创建出来的-vue-项目，改版成一个-hello-world" class="headerlink" title="针对 vue 命令创建出来的 vue 项目，改版成一个 hello world"></a>针对 vue 命令创建出来的 vue 项目，改版成一个 hello world</h4><p>对 src 内的文件进行处理</p><ul><li>找到 app.vue ，删除 <code>template</code> 里面的所有内容，以 <code>&lt;h1&gt;hello world&lt;/h1&gt;</code> 替代，删除 <code>style</code> 内的所有内容， 删除 <code>script</code> 内的部分内容只留下默认导出对象，以及对象下的 name 属性。</li><li>找到 components 文件夹直接删除</li><li>直接去浏览器查看</li></ul><h4 id="写另外一个组件，引入到-App-vue-中"><a href="#写另外一个组件，引入到-App-vue-中" class="headerlink" title="写另外一个组件，引入到 App.vue 中"></a>写另外一个组件，引入到 App.vue 中</h4><ul><li>在 src 文件夹内新建一个文件夹叫 components ，里面新建一个 Button.vue</li><li>在 App.vue 中的 script 标签内的最上方使用默认导入导入你的 Button.vue，在默认导出的的对象内添加一个 components 属性，该属性的属性值是一个对象，对象内直接写上导入的组件名</li><li>在 App.vue 的 template 标签内直接写以组件名为标签名的标签即可，一般写成单闭合标签即可，就相当于使用了组件。</li></ul><h2 id="Vue-的基础语法"><a href="#Vue-的基础语法" class="headerlink" title="Vue 的基础语法"></a>Vue 的基础语法</h2><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>vue 允许在 template 内写 js</p><ul><li>在两个标签中间 使用 ，这个 js 语句必须有返回值</li><li><p>在开始标签内 需要使用指令 v-bind 如何使用 例子如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"js语法"</span> /&gt;</span><br><span class="line"><span class="comment">// v-bind:  指令可以简写成   :</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="class-与-style-绑定"><a href="#class-与-style-绑定" class="headerlink" title="class 与 style 绑定"></a>class 与 style 绑定</h4><p>vue 组件处理样式的方案</p><h6 id="class-的绑定"><a href="#class-的绑定" class="headerlink" title="class 的绑定"></a>class 的绑定</h6><ul><li><p>对象语法 例子: 加上了 active class 名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: true &#125;"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组语法 例子: 加上了 active 以及 bg class 名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[true ? 'active' : '', 'bg']"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>原始语法 例子:加上了 active</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">" true ? 'active' : 'bg' "</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="style-的绑定"><a href="#style-的绑定" class="headerlink" title="style 的绑定"></a>style 的绑定</h6><ul><li><p>对象语法 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"&#123; color: 'red', fontSize: '20px' &#125;"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组语法 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"[styles, otherStyles]"</span> /&gt;</span><br><span class="line"><span class="comment">// styles 和 otherStyles 指的对象  &#123;color: 'red'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue-组件的-data-state"><a href="#Vue-组件的-data-state" class="headerlink" title="Vue 组件的 data(state)"></a>Vue 组件的 data(state)</h4><p>只要页面发生改变就需要设置 data ，由 data 去控制页面的变化。</p><ul><li>如何创建一个 data，在组件导出的对象下，添加一个属性 data，该属性的属性值为一个函数，该函数必须返回一个对象，对象内写的就是组件的数据。</li><li>创建好的 data ，在组件的 template 内可以直接使用</li><li>创建好的 data ，在其他地方使用的时候需要加 this.xxx</li><li>想要修改 data ，直接对属性进行重新赋值即可</li></ul><h4 id="Vue-组件的事件处理"><a href="#Vue-组件的事件处理" class="headerlink" title="Vue 组件的事件处理"></a>Vue 组件的事件处理</h4><p>使用 v-on 指令绑定事件 可以简写成@ 例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"funName"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件函数(funName) 需要在组件默认导出的对象下添加一个 methods 属性,该属性的属性值是一个对象，该对象下的方法就可以被当做事件函数。在 template 内 methods 对象下的方法可以直接使用。<br>methods 的函数内只要使用了 this 那么这个函数就不能写成箭头函数，必须写成普通函数。</p><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>页面中某个元素出现或者消失</p><ol><li><p>none — flex | block | inline-block | inline ,需要使用 v-show 指令 例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"数据"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 数据的值为 false 的话 div 消失，true 的话出现 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>元素在页面中 remove 或者 create ，需要使用指令 v-if ，一般搭配 v-else 一起使用 例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showBox1"</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>git 图<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意 v-if 和 v-else 必须紧挨着，作为兄弟结构</p></li></ol><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>我们页面展示的内容(列表内容),一般都是获取后台数据，将后台数据处理生生页面中的结构。后台的数据一般都是 array。<br>v-for 经常搭配 v-if 使用,等待后台数据的过程此时展示 gif 图，<br>在 vue 中实现列表渲染直接使用 v-for 指令 例子<br>template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"goods"</span> <span class="attr">v-for</span>=<span class="string">"(cart,index) in carts"</span> <span class="attr">:key</span>=<span class="string">"cart.id"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>名称: &#123;&#123;cart.goodsName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>索引值: &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-for 生成的标签必须加上 key 属性，属性值不许保证不重复。跟 vue 底层处理虚拟 dom 有关。一般来说 key 的值都是后台数据的 id 的值</p><p>script</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      carts: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"xdg12"</span>,</span><br><span class="line">          goodsName: <span class="string">"mac book pro"</span>,</span><br><span class="line">          price: <span class="number">12000</span>,</span><br><span class="line">          num: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">"djashg12"</span>,</span><br><span class="line">          goodsName: <span class="string">"奥迪A8"</span>,</span><br><span class="line">          price: <span class="number">1200000</span>,</span><br><span class="line">          num: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h4 id="Vue-组件的-prop"><a href="#Vue-组件的-prop" class="headerlink" title="Vue 组件的 prop"></a>Vue 组件的 prop</h4><p>组件的复用：就是小的组件在大组件中反复使用。需要父组件传递对应的信息给子组件。如何传递，就需要使用 vue 组件 prop。如何使用 prop</p><ul><li>在父组件内使用子组件的时候，可以给子组件创造属性(相当传递的数据) 例如 Header 组件内写成<code>&lt;Button text=&quot;登录&quot;/&gt;</code></li><li>在子组件内的默认导出对象下可以添加一个 props 属性，用来获取父组件传递过来的数据,该属性的属性值是一个数组(也可以是一个对象),数组内写父组件创造的属性名 例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"btn"</span>,</span><br><span class="line">  props: [<span class="string">"text"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写好之后其实 text 就相当于了子组件的一个数据了</p><ul><li><p>prop 可以设置默认值，直接在 子组件内判断即可 例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">  &#123;&#123;text ? text : '默认按钮'&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>prop 设置默认值的方式还有一种,需要把 props 的属性值写成对象类型,对象下的属性就代表父组件传递过来的属性，该属性的属性值需要写成对象形式，该对象可以有 type default validator … 属性。 type 属性意思是父组件传递过来的值的类型。 default 属性代表的是默认值。validator 属性是检测父组件传递过来的值是否满足条件，该属性需要写成能一个函数，并返回一个布尔值！</p></li></ul><h4 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h4><p>父组件给子组件绑定的自定义事件(父组件向子组件传递函数)</p><ul><li>在父组件内 使用 @自定义事件名 = “父组件的函数” 向子组件传递函数</li><li>在子组件内使用 <code>$emit(&#39;自定义函数名&#39;)</code> 接收</li><li>假如父组件的函数定义的时候写了参数，那么子组件调用的时候就需要传递参数 如何使用 <code>$emit(&#39;自定义函数名&#39;,&#39;参数1&#39;,&#39;参数2&#39;。。。)</code></li></ul><p>例子:<br>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"signup"</span> <span class="attr">text</span>=<span class="string">"注册"</span> @<span class="attr">clickFun</span>=<span class="string">"signUp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"clickFun"</span>);</span><br></pre></td></tr></table></figure><p>子组件在 template 中直接使用 <code>$emit(&#39;自定义事件名&#39;)</code></p><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>当父组件想向子组件传递一些 html 结构让子组件展示，此时需要使用插槽。 如何使用</p><ul><li><p>在父组件内将需要子组件展示的 html 结构写到子组件的闭合标签内部。例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">title</span>=<span class="string">"对话框"</span> <span class="attr">okText</span>=<span class="string">"OK"</span> <span class="attr">cancelText</span>=<span class="string">"Cancel"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插槽的父组件内的写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件内使用 slot 标签接收父组件传递过来的 html 结构 例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- slot代表父组件传递过来的结构--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插槽可以添加命名称，称作为具名插槽。(作用就是将父组件传递过来的 html 结构，按需处理，有的结构放在 header 有的结构放在 footer)</p></li><li><p>在父组件内的子组件闭合标签内，使用 template 标签嵌套某个 html 结构，并且给该 template 标签写上 v-slot:名</p></li><li><p>在子组件内 使用 <code>&lt;slot name=&quot;父组件内的 template 标签的v-slot的值&quot;&gt;&lt;/slot&gt;</code></p></li></ul><h4 id="组件之间的交互"><a href="#组件之间的交互" class="headerlink" title="组件之间的交互"></a>组件之间的交互</h4><ul><li>父组件和子组件之间的交互<ul><li>prop</li><li>组件的自定义事件</li></ul></li><li>子组件和父组件之间的交互<br>子组件修改父组件的状态(data),先在父组件内声明修改自己 data 的方法，把方法传递给子组件执行即可<ul><li>组件的自定义事件</li><li>prop</li></ul></li><li>兄弟组件之间的交互<ul><li>将需要交互的 data 定义在共同的祖先组件内</li><li>把祖先的 data 和 修改 data 的方法当作 prop 或自定义事件传递给子组件</li></ul></li><li>vuex(终极解决方案)</li></ul><h4 id="Vue-组件的计算属性-computed"><a href="#Vue-组件的计算属性-computed" class="headerlink" title="Vue 组件的计算属性 computed"></a>Vue 组件的计算属性 computed</h4><p>当个你有了一个 data ，但是使用的时候并不是直接使用 data 数据而是使用 data 数据的变形，此时需要定义一个 computed,computed 的用法和 data 一样 例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">   commentNum() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.comments.length;</span><br><span class="line">   &#125;,</span><br><span class="line">   currentComments() &#123;</span><br><span class="line">     <span class="keyword">return</span> [...this.comments].reverse();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h4><ul><li>shortId 简短的 id，辅助生成不重复 id<ul><li>安装包 <code>npm i shortid</code></li><li>import 引入</li><li>使用</li></ul></li></ul><h4 id="Vue-组件内的过渡和动画"><a href="#Vue-组件内的过渡和动画" class="headerlink" title="Vue 组件内的过渡和动画"></a>Vue 组件内的过渡和动画</h4><p>transition 和 transition-group</p><h4 id="Vue-的路由"><a href="#Vue-的路由" class="headerlink" title="Vue 的路由"></a>Vue 的路由</h4><p>vue 项目内的页面跳转，本身 vue 内不带路由功能，需要自己添加。</p><ul><li>安装 vue 路由 <code>npm i vue-router</code></li><li>新建一个 src/router.js</li><li><p>在 router.js 内给 vue 项目安装上路由功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure></li><li><p>创建路由 <code>new VueRouter({routes:xxxxx,mode: xxxx})</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    component: <span class="string">"组件名"</span>,</span><br><span class="line">    path: <span class="string">"地址"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">"history"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>将创建好的路由导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p>到项目的 main.js 内导入路由并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在 Vue 项目所有组件内都可以使用路由了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 router-view 标签展示路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 router-link 标签实现路由的跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"路由页面的path"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue-项目部署"><a href="#Vue-项目部署" class="headerlink" title="Vue 项目部署"></a>Vue 项目部署</h4><ul><li>先确保本地的 localhost:8080 下的项目能正常运行</li><li>在项目下打开命令行执行 <code>npm run build</code> ,把你做好的项目打包到项目下的 dist 文件夹下</li><li><p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <a href="https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在" target="_blank" rel="noopener">https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在</a> <a href="https://www.my-app.com/my-app/，则设置" target="_blank" rel="noopener">https://www.my-app.com/my-app/，则设置</a> publicPath 为 /my-app/。<br>更改 publicPath，修改 vue cli 的配置环境</p><ul><li>在项目根目录下 新建一个文件 vue.config.js ,该文件会自动被加入到 vue 的配置环境中。</li><li><p>在文件内写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath:</span><br><span class="line">    process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"/你的子目录地址/"</span> : <span class="string">"/"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>publicPath 配置完毕需要重新编译打包生成新的 dist 文件夹在重新部署到你的 github 上</p></li></ul><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><p>状态管理模式 —-&gt; 状态共享到 store,通过 store 共享给其他的所有组件, 组件也可以直接修改共享状态<br>如何创建 store</p><ul><li>安装 vuex <code>npm i vuex</code></li><li><p>在项目下的 src 文件夹下新建一个 store.js。内部写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line">Vue.use(Vuex); <span class="comment">//详细参考 官方文档中 插件一节(mixins)</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// state 是该项目共享数据的地方</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// mutations 内写的都是函数  该函数的作用是修改 state 的方法，而且该函数只能接收两个参数,第一个参数是 state 也就是上面定义好的共享数据,第二个参数是载荷数据(payload),指的是修改 state 需要的其他参数。</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCount(state, newCount) &#123;</span><br><span class="line">      <span class="comment">// 将 count 修改成任意值</span></span><br><span class="line">      state.count = newCount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li><li><p>进入到项目下的 main.js 文件内，导入 store, 并且在 new Vue 中添加一条属性叫 store 值为你导入的 store</p></li></ul><p>组件中使用 store</p><ul><li>直接使用 \$store.state 获取共享的数据即可</li><li>一般 store 内的数据需要配合 computed 使用</li></ul><p>组件内动态修改 store</p><ul><li>使用 \$store 下的 commit 方法去触发创建好的 mutation 函数 <code>$store.commit(&#39;changeCount&#39;)</code><ul><li>修改 store 的时候有可能需要传递参数。如何传递—-&gt; <code>$store.commit(&#39;changeCount&#39;,1000)</code></li><li>注意 传递的参数只能有一个，想要传递多个的话，把多个参数合并成对象传递</li></ul></li></ul><h4 id="Vuex-关键字"><a href="#Vuex-关键字" class="headerlink" title="Vuex 关键字"></a>Vuex 关键字</h4><h6 id="state-属性"><a href="#state-属性" class="headerlink" title="state 属性"></a>state 属性</h6><p>存放公共状态的属性，vue 组件内获取方式 <code>$store.state</code></p><h6 id="mutations-属性"><a href="#mutations-属性" class="headerlink" title="mutations 属性"></a>mutations 属性</h6><p>存储修改 state 的方法的对象</p><ul><li>mutation 函数内可以接收两个参数 1.state 2.payload</li><li>该函数必须是同步函数</li><li>通过 store 的 commit 方法触发 mutation 函数</li></ul><h6 id="actions-属性"><a href="#actions-属性" class="headerlink" title="actions 属性"></a>actions 属性</h6><p>存储异步操作函数的对象,修改 state 时需要发送请求,但是请求不能写到 mutation 函数内</p><ul><li>action 函数内可以接收两个参数 1.context 2.payload</li><li>该函数必须是异步函数, 如果没有异步操作不需要写 action 函数</li><li>通过 store 的 dispatch 方法触发 action 函数</li></ul><h6 id="getters-属性"><a href="#getters-属性" class="headerlink" title="getters 属性"></a>getters 属性</h6><p>store 的计算属性, vue 组件内获取方式 <code>$store.getters</code></p><ul><li>getters 函数内可以接收三个参数 1.state(自己模块的 state) 2.getters(store 内的其他 getters) 3. rootState (根目录的 state)</li><li>用法和写法与组件的 computed 一样</li></ul><h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><ul><li><code>&lt;Dem&gt; - did you register the component correctly?</code></li><li><code>Failed to compile.</code> 编译失败 <code>Module not found: Error: Can&#39;t resolve &#39;./components/Dem&#39; in &#39;D:\digitalcity授课\2019\1903\1903\vue-demo\src&#39;</code></li></ul><p>使用 sass<br><code>npm install node-sass --save-dev</code><br><code>npm install sass-loader --save-dev</code><br><a href="https://www.cnblogs.com/gudi/p/8075631.html" target="_blank" rel="noopener">sass</a><br><a href="https://segmentfault.com/a/1190000015932467" target="_blank" rel="noopener">scope</a></p><h4 id="vue-跨域"><a href="#vue-跨域" class="headerlink" title="vue 跨域"></a>vue 跨域</h4><ul><li><p>vue cli3</p></li><li><p>建立 vue.config.js 文件</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 配置代理服务器</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"https://www.wanandroid.com"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">"^/api"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>this.\$el.textContent</p><h4 id="VUE-全局过滤器-filter"><a href="#VUE-全局过滤器-filter" class="headerlink" title="VUE 全局过滤器 filter"></a>VUE 全局过滤器 filter</h4><p>1.1 过滤器科用在两个地方：双花括号插值 和 v-bind 表达式 中。过滤器应该被添加在 js 表达式的尾部，由管道符号指示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双花括号中</span></span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    message | capitalize;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在v-bind 中</span></span><br><span class="line">&lt;div v-bind:id=<span class="string">" rawId | formatId"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>1.2 定义过滤器</p><ul><li>在组件选项中定义本地过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  参数1：表示要过滤的内容</span></span><br><span class="line"><span class="comment">//  参数2：表示传递给过滤器的格式</span></span><br><span class="line"></span><br><span class="line">filters: &#123;</span><br><span class="line"></span><br><span class="line">  capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    value = value.toString()</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在创建 Vue 实例前定义全局过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  参数1：过滤器名称</span></span><br><span class="line"><span class="comment">//  参数2：过滤器的逻辑</span></span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">"capitalize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  value = value.toString();</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="vuex-在模块中-getters-和-actions-命名重复会冲突，用命名空间即可解决"><a href="#vuex-在模块中-getters-和-actions-命名重复会冲突，用命名空间即可解决" class="headerlink" title="vuex 在模块中 getters 和 actions 命名重复会冲突，用命名空间即可解决"></a>vuex 在模块中 getters 和 actions 命名重复会冲突，用命名空间即可解决</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123; <span class="attr">xxx</span>: &#123; handler(newVal, oldVel) &#123;&#125;, <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">immediate</span>: <span class="literal">true</span> &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue-项目介绍&quot;&gt;&lt;a href=&quot;#vue-项目介绍&quot; class=&quot;headerlink&quot; title=&quot;vue 项目介绍&quot;&gt;&lt;/a&gt;vue 项目介绍&lt;/h2&gt;&lt;h4 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h4&gt;&lt;p&gt;只要是后缀名为 .vue 的文件都称为组件，可以把组件理解成之前 html 内的某个 div，整个 vue 项目就是由很多小的组件组合的。&lt;br&gt;组件可以复用。组件的名称都是大写字母开头的，或者大驼峰方式 例如:HeaderTop&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>cordova-vue</title>
    <link href="http://yoursite.com/2019/07/23/cordova-vue/"/>
    <id>http://yoursite.com/2019/07/23/cordova-vue/</id>
    <published>2019-07-23T01:23:42.000Z</published>
    <updated>2019-12-02T11:08:49.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><p>用 vue 配合 cordova 可以实现手机端打包，不用更换框架。可以使用 Cordova 里面的插件来调用手机的原生功能</p> <a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line">本教程环境版本介绍：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK： JDK_1<span class="number">.8</span><span class="number">.0</span>_64bit   （根目录有提供）</span><br><span class="line"></span><br><span class="line">nodejs: v8<span class="number">.11</span><span class="number">.2</span>  （建议用最新的稳定版本）</span><br><span class="line"></span><br><span class="line">cordova: <span class="number">8.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">android studio：目前最新版本<span class="number">3.1</span><span class="number">.3</span>  （建议升级为最新）  下载地址：http:<span class="comment">//www.android-studio.org/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ionic3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ionic3=cordova+angular+ionicUI      （Ionic UI组件+ Javascript API+Ionic Native）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：它提供了漂亮的UI组件库、强大的JS APi以及基于调用原生的的Native APi,可以让我们快速开发跨平台的混合APP以及移动web页面。（推荐*）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">缺点：angular   react   vue开发的移动端应用要打包成app的时候得重新再学习ionic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue开发的项目直接可以打包成app，并且可以让vue调用原生的功能（拍照）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阿里weex框架：不建议大家用weex  （不能直接把vue项目打包成app、学习weex成本高、weex不是特别成熟）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova+vue：  （cordova非常成熟、插件也非常多、扩展性也强）  <span class="number">10</span>年的历史</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reactNative：基于react</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova介绍：</span><br><span class="line"></span><br><span class="line">cordova: 可以把html css js写的代码打包成app，还可以让js调用原生的api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ionic、cordova+vue、cordova+react 、cordova+angular</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用cordova开发android 应用</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 安装jdk 、配置jdk</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 安装android studio</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 安装nodejs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 安装cordova    npm  install  -g  cordova   /   cnpm install -g cordova</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install -g cordova --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 创建项目      cordova create 项目名称</span><br><span class="line"></span><br><span class="line">cordova create 项目名  com.公司名.项目名  类名 （建议）</span><br><span class="line"></span><br><span class="line">cordova create cordovademo02  com.itying.cordova  Cordovademo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建项目的时候注意包名称：发布上线打包的时候用到包名称，注意</span><br><span class="line"></span><br><span class="line">修改应用包名名称参考：http:<span class="comment">//www.ionic.wang/article-index-id-91.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改应用包名名称：</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> 修改config.xml里面的包名称</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span> 修改完成以后重新执行cordova platform add android</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> cd 到项目里面    cd cordovademo02</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 把android的平台添加到项目里面     cordova platform add android</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 把项目导入到 android studio 进行运行调试  （或者运行   cordova  run  android）   注意可能遇到的问题参考（安装遇到问题图文解决方案文件夹）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 运行项目 ：注意</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、android手机要连上电脑，并且 android手机必须开启调试模式（如何开启:百度搜 xxx手机开启调试模式）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、android studio必须得安装手机对应的sdk</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、关闭<span class="number">360</span>手机助手、xxx手机助手</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> 修改项目:  运行cordova prepare</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用cordova开发ios 应用环境搭建：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、安装nodejs 安装xcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、安装cordova    npm  install  -g  cordova   /   cnpm install -g cordova</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> npm install -g cordova --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>创建项目      cordova create 项目名称</span><br><span class="line"></span><br><span class="line">cordova create 项目名  com.公司名.项目名  类名 （建议）</span><br><span class="line"></span><br><span class="line">cordova create cordovademo02  com.itying.cordova  Cordovademo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>cd  cordovademo02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、把ios的平台添加到项目里面  cordova platform add ios</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、用xcode打开项目运行</span><br><span class="line">参考ionic3教程  Mac电脑安装 ionic3.x cordova 以及创建证书、打包ios app、上传应用市场 app教程（<span class="number">5</span>小讲）：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova安装插件：</span><br><span class="line"></span><br><span class="line">如果我们要在自己的html里面调用手机原生的功能（拍照、扫描二维码、获取地理位置...）,借助cordova的插件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova官网：https:<span class="comment">//cordova.apache.org/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如何使用插件：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、安装插件     cordova plugin  add  插件名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、复制文档使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看已经安装的插件：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova plugin list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">卸载插件：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova plugin rm  cordova-plugin-network-information</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、设备插件的使用</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//cordova.apache.org/docs/en/latest/reference/cordova-plugin-device/index.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、安装cordova plugin add cordova-plugin-device</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、看文档使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、使用网络相关的插件：</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//cordova.apache.org/docs/en/latest/reference/cordova-plugin-network-information/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、安装cordova plugin add cordova-plugin-network-information</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、看文档使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、定位插件：</span><br><span class="line">https:<span class="comment">//cordova.apache.org/docs/en/latest/reference/cordova-plugin-geolocation/index.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、安装cordova plugin add cordova-plugin-geolocation</span><br><span class="line"><span class="number">2</span>、看文档使用</span><br><span class="line">注意改代码以后要运行：cordova prepare</span><br><span class="line">注意：要引入cordova.js</span><br><span class="line"></span><br><span class="line">注意：项目里面不要有中文文件夹、不要有zip包 、不要有中文文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、拍照插件</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：ios拍照完成以后调用  navigator.camera.cleanup(onSuccess, onFail);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、文件上传 或者下载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、文件插件: https:<span class="comment">//cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、文件传输插件：https:<span class="comment">//www.npmjs.com/package/cordova-plugin-file-transfer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova打包vue项目：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova: 可以把html css js写的代码打包成app，还可以让js调用原生的api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cordova+vue、cordova+react 、cordova+angular 、 cordova+jquery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建vue项目的时候有两种方式：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue init webpack 项目名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue init webpack-simple  项目名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正式发布vue的项目：（把vue项目打包成浏览器能解析的代码）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm run build   （把vue打包成浏览器能解析的代码）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把vue项目用cordova打包成app：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> npm run build        （注意：图片 目录的路径）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、把vue打包后的静态资源复制到cordova项目里面</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、运行 cordova prepare</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">vue init webpack-simple  项目名称</span><br><span class="line"></span><br><span class="line">修改：webpack.config.js里面  publicPath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把publicPath: <span class="string">'/dist/'</span>    改为  publicPath: <span class="string">'dist/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改index里面引入dist的路径  去掉前面的  / (重要)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue init webpack  项目名称</span><br><span class="line"></span><br><span class="line">修改：config/index.js  把 assetsPublicPath: <span class="string">'/'</span>,  修改成   assetsPublicPath: <span class="string">'./'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩展：http-server  轻量级的http服务器</span><br><span class="line"></span><br><span class="line">npm install -g http-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用法：cd到目录运行 http-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看教程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https:<span class="comment">//pan.baidu.com/s/1VfqhpjohCIK-fTG-NqqllA</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用原因&quot;&gt;&lt;a href=&quot;#使用原因&quot; class=&quot;headerlink&quot; title=&quot;使用原因&quot;&gt;&lt;/a&gt;使用原因&lt;/h2&gt;&lt;p&gt;用 vue 配合 cordova 可以实现手机端打包，不用更换框架。可以使用 Cordova 里面的插件来调用手机的原生功能&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ionic</title>
    <link href="http://yoursite.com/2019/07/22/ionic/"/>
    <id>http://yoursite.com/2019/07/22/ionic/</id>
    <published>2019-07-22T09:32:10.000Z</published>
    <updated>2019-12-02T11:08:49.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h2 id="使用的是-ionic1"><a href="#使用的是-ionic1" class="headerlink" title="使用的是 ionic1"></a>使用的是 ionic1</h2><ol><li>npm install -g cordova</li><li>npm install -g ionic</li><li>ionic start myApp tabs –type=ionic1</li><li>在项目根目录，终端输入 ionic serve,可以在浏览器中打开</li></ol><a id="more"></a><h2 id="ionic-页面跳转"><a href="#ionic-页面跳转" class="headerlink" title="ionic 页面跳转"></a>ionic 页面跳转</h2><ul><li><p>ionic 常用的跳转一共有两种类型，</p></li><li><p>一种是通过 state 的名字<br>–’tab.chat-detail’来跳转；</p></li><li>另一种则是通过 url–’/chats/:chatId‘来跳转。</li><li>先说第一种，通过 state 名字–’tab.chat-detail’跳转。<br>(1)在 angularjs 里，使用：\$state.go(‘’tab.chat-detail’),<br>(2)如果是 a 标签跳转，则使用：ui-sref=“tab.chat-detail”。</li><li>第二种跳转，通过 url—‘/chats/:chatId‘来跳转。<br>(1)在 angularjs 里，使用：\$location.path(‘/chats/1’),<br>(2)如果是 a 标签跳转，则使用：ng-href=“/chats/1”。或 href=“/chats/1”</li></ul><h2 id="打包-ionic-项目"><a href="#打包-ionic-项目" class="headerlink" title="打包 ionic 项目"></a>打包 ionic 项目</h2><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 安装 android studio</span><br><span class="line">   [参考链接](https:<span class="comment">//developer.android.google.cn/studio)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 安装 JDK 配置 JAVA 环境</span><br><span class="line">   [参考链接](https:<span class="comment">//www.oracle.com/technetwork/java/javase/downloads/index.html)</span></span><br><span class="line">   **java 必须下载 <span class="number">1.8</span> 版本**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行操作</span></span><br><span class="line"> cd ~</span><br><span class="line"><span class="comment">// 新建并打开touch .bash_profile</span></span><br><span class="line">open .bash_profile</span><br><span class="line"><span class="comment">// 复制到文件中，保存并关闭</span></span><br><span class="line"><span class="comment">// 注意：路径都是一样的，只需要修改版本号就可以export export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/HomePATH=$JAVA_HOME/bin:$PATH:.CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME</span><br><span class="line"><span class="keyword">export</span> PATH</span><br><span class="line"><span class="keyword">export</span> CLASSPATH</span><br><span class="line"><span class="comment">// 更新source .bash_profile// 检测java -version</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 安装 Android SDK Tools</span><br><span class="line"></span><br><span class="line">[参考链接](https:<span class="comment">//www.cnblogs.com/jiangtengteng/p/6680654.html)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建并打开touch .bash_profile (其实可以省略这个 因为都是和上面同一个文件里面 添加)</span></span><br><span class="line">open .bash_profile</span><br><span class="line"><span class="comment">// 复制到文件中，保存并关闭</span></span><br><span class="line"><span class="comment">// 路径只需把文件拖入命令行中就会显示绝对路径</span></span><br><span class="line"><span class="keyword">export</span> ANDROID_HOME=<span class="regexp">/Users/</span>xxxx/Downloads/android-sdk-macosx</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class="line"><span class="comment">// 更新source .bash_profile</span></span><br><span class="line"><span class="comment">// 检测，控制台 输入 adb   出现command not found 就是错了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 安装 grddle</span><br><span class="line">   [参考链接](http:<span class="comment">//services.gradle.org/distributions/)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行操作cd ~</span></span><br><span class="line"><span class="comment">//open .bash_profile </span></span><br><span class="line"><span class="comment">// 路径要替换为你自己的,还有版本也要替换好</span></span><br><span class="line">GRADLE_HOME=<span class="regexp">/Users/</span>xxxx/opt/gradle<span class="number">-5.3</span>;</span><br><span class="line"><span class="keyword">export</span> GRADLE_HOME</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GRADLE_HOME/bin</span><br><span class="line"><span class="comment">// 更新source .bash_profile</span></span><br><span class="line"><span class="comment">// 检测gradle -version</span></span><br></pre></td></tr></table></figure><h3 id="打包-android"><a href="#打包-android" class="headerlink" title="打包 android"></a>打包 android</h3><ol><li>ionic cordova platform remove android 移除安卓</li><li>ionic cordova platform add android 添加安卓</li><li>ionic cordova build android =&gt; debug 调试版打包(会在 xxx\platforms\android\build\outputs\apk 下生成 android-debug.apk 这种命令生成的 apk 是用于调试的。)</li><li>ionic cordova build android –release =&gt; release 发布版打包</li><li>ionic cordova run android =&gt; 把本地打的 debug 包 apk 安装在真机上</li><li>adb install xxx\platforms\android\build\outputs\apk\xxx.apk =&gt; 安装命令安装<br><a href="https://my.oschina.net/u/2949632/blog/1186414" target="_blank" rel="noopener">参考链接</a></li></ol><h3 id="打包-ios"><a href="#打包-ios" class="headerlink" title="打包 ios"></a>打包 ios</h3><ol><li>ionic cordova platform add ios（第一次）</li><li>ionic cordova platform rm ios</li><li>ionic cordova build ios –prod</li><li>ionic cordova plugin rm cordova-plugin-camera//移除插件</li><li>ionic cordova plugin add cordova-plugin-camera//添加插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建ios平台文件</span><br><span class="line">ionic cordova platform rm ios</span><br><span class="line">ionic cordova platform add ios</span><br><span class="line">ionic cordova resources ios<span class="comment">//正常执行完上面两句，资源文件都已经被更新，如果没有更新则执行本行命令</span></span><br><span class="line">ionic cordova build ios</span><br></pre></td></tr></table></figure><p>StatusBar.styleDefault 状态栏默认样式，也就是电池信号黑色；<br>StatusBar.styleLightContent 状态栏内容浅色，貌似就是白色，适合深色背景；<br>StatusBar.styleBlackTranslucent 状态栏黑色半透明，我测了下，跟上面一样的效果，电池时间都是白色的，适合深色背景；<br>StatusBar.styleBlackOpaque 状态栏黑色不透明。我测了下，还是白色的，跟上面一样，适合深色背景；<br>StatusBar.hide 状态栏隐藏；<br>StatusBar.show 状态栏显示；</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p><a href="https://www.jianshu.com/p/ad27b8dcd098" target="_blank" rel="noopener">参考文档</a></p><ul><li>修改 ionic.config.json(旧版本 Ionic CLI 是 ionic.project)：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"proxy-example"</span>,</span><br><span class="line">  <span class="string">"app_id"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"proxies"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"path"</span>: <span class="string">"/api"</span>,</span><br><span class="line">      <span class="string">"proxyUrl"</span>: <span class="string">"http://cors.api.com/api"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mac-path-设置"><a href="#mac-path-设置" class="headerlink" title="mac path 设置"></a>mac path 设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=<span class="regexp">/Library/</span>Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0</span>_211.jdk/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line"><span class="keyword">export</span> JAVA_HOME</span><br><span class="line"><span class="keyword">export</span> PATH</span><br><span class="line"><span class="keyword">export</span> CLASSPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ANDROID_HOME=<span class="regexp">/Users/m</span>ac/Library/Android/sdk</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ANT_HOME=<span class="regexp">/Applications/</span>apache-ant<span class="number">-1.10</span><span class="number">.6</span></span><br><span class="line"><span class="keyword">export</span> PATH=$ANT_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRADLE_HOME=<span class="regexp">/Users/m</span>ac/gradle<span class="number">-4.1</span></span><br><span class="line"><span class="keyword">export</span> GRADLE_HOME</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GRADLE_HOME/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;PATH&#125;:<span class="regexp">/usr/</span>local/mysql<span class="number">-8.0</span><span class="number">.16</span>-macos10<span class="number">.14</span>-x86_64/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> PUB_HOSTED_URL=https:<span class="comment">//pub.flutter-io.cn</span></span><br><span class="line"><span class="keyword">export</span> FLUTTER_STORAGE_BASE_URL=https:<span class="comment">//storage.flutter-io.cn</span></span><br><span class="line"><span class="keyword">export</span> PATH=<span class="regexp">/Users/m</span>ac/flutter<span class="number">-1.7</span><span class="number">.8</span>/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h2 id=&quot;使用的是-ionic1&quot;&gt;&lt;a href=&quot;#使用的是-ionic1&quot; class=&quot;headerlink&quot; title=&quot;使用的是 ionic1&quot;&gt;&lt;/a&gt;使用的是 ionic1&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;npm install -g cordova&lt;/li&gt;
&lt;li&gt;npm install -g ionic&lt;/li&gt;
&lt;li&gt;ionic start myApp tabs –type=ionic1&lt;/li&gt;
&lt;li&gt;在项目根目录，终端输入 ionic serve,可以在浏览器中打开&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rotation chart</title>
    <link href="http://yoursite.com/2019/02/26/rotation/"/>
    <id>http://yoursite.com/2019/02/26/rotation/</id>
    <published>2019-02-26T09:42:29.000Z</published>
    <updated>2019-12-02T11:49:18.454Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JQ-轮播图"><a href="#JQ-轮播图" class="headerlink" title="JQ 轮播图"></a>JQ 轮播图</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550593881237&di=76955775ab7b210d91dbe6827fb27c24&imgtype=0&src=http%3A%2F%2Fimg95.699pic.com%2Fphoto%2F50051%2F6573.jpg_wh860.jpg" width="300" hegiht="100"></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .lunbo &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">      width: 670px;</span><br><span class="line">      height: 329px;</span><br><span class="line">    &#125;</span><br><span class="line">    .lunbo img &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transition: all 0.75s;</span><br><span class="line">    &#125;</span><br><span class="line">    .lunbo .active &#123;</span><br><span class="line">      opacity: 1;</span><br><span class="line">      z-index: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    .list &#123;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      position: absolute;</span><br><span class="line">      z-index: 2;</span><br><span class="line">      display: flex;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      left: 50%;</span><br><span class="line">      margin-left: -100px;</span><br><span class="line">    &#125;</span><br><span class="line">    .list li &#123;</span><br><span class="line">      list-style: none;</span><br><span class="line">      width: 40px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      background-color: pink;</span><br><span class="line">      text-align: center;</span><br><span class="line">      color: #fff;</span><br><span class="line">      transition: all 0.75s;</span><br><span class="line">    &#125;</span><br><span class="line">    .list .change &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      color: #000;</span><br><span class="line">    &#125;</span><br><span class="line">    button &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      z-index: 3;</span><br><span class="line">      top: 50%;</span><br><span class="line">      width: 40px;</span><br><span class="line">      height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line">      right: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;lunbo&quot;&gt;</span><br><span class="line">      &lt;img src=&quot;./images/gracetan_01.jpg&quot; alt=&quot;&quot; class=&quot;active&quot; /&gt;</span><br><span class="line">      &lt;img src=&quot;./images/gracetan_02.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">      &lt;img src=&quot;./images/gracetan_03.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">      &lt;img src=&quot;./images/gracetan_04.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">      &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;change&quot;&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;button class=&quot;left&quot;&gt;&lt;&lt;/button&gt;</span><br><span class="line">      &lt;button class=&quot;right&quot;&gt;&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      let fun = 0</span><br><span class="line">      $(&apos;.btn&apos;).click(function() &#123;</span><br><span class="line">        console.log(1)</span><br><span class="line">        if (fun === 0) &#123;</span><br><span class="line">          fun = 1</span><br><span class="line">          $(&apos;.box&apos;).css(&#123; &apos;background-color&apos;: &apos;brown&apos; &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          fun = 0</span><br><span class="line">          $(&apos;.box&apos;).css(&#123; &apos;background-color&apos;: &apos;pink&apos; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      $(&apos;li&apos;).click(function() &#123;</span><br><span class="line">        const ind = $(this).index()</span><br><span class="line">        num = ind</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .siblings()</span><br><span class="line">          .eq(ind)</span><br><span class="line">          .addClass(&apos;active&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;active&apos;)</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .children()</span><br><span class="line">          .eq(ind)</span><br><span class="line">          .addClass(&apos;change&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;change&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">      let num = 0</span><br><span class="line">      let imgNum = $(&apos;img&apos;).length</span><br><span class="line">      $(&apos;.right&apos;).click(function() &#123;</span><br><span class="line">        num = num + 1</span><br><span class="line">        if (num &gt; imgNum - 1) &#123;</span><br><span class="line">          num = 0</span><br><span class="line">        &#125;</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .find(&apos;img&apos;)</span><br><span class="line">          .eq(num)</span><br><span class="line">          .addClass(&apos;active&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;active&apos;)</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .find(&apos;ul&apos;)</span><br><span class="line">          .children()</span><br><span class="line">          .eq(num)</span><br><span class="line">          .addClass(&apos;change&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;change&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">      $(&apos;.left&apos;).click(function() &#123;</span><br><span class="line">        num = num - 1</span><br><span class="line">        if (num &lt; 0) &#123;</span><br><span class="line">          num = imgNum - 1</span><br><span class="line">        &#125;</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .find(&apos;img&apos;)</span><br><span class="line">          .eq(num)</span><br><span class="line">          .addClass(&apos;active&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;active&apos;)</span><br><span class="line">        $(this)</span><br><span class="line">          .parent()</span><br><span class="line">          .find(&apos;ul&apos;)</span><br><span class="line">          .children()</span><br><span class="line">          .eq(num)</span><br><span class="line">          .addClass(&apos;change&apos;)</span><br><span class="line">          .siblings()</span><br><span class="line">          .removeClass(&apos;change&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">      var stop = null</span><br><span class="line">      function run() &#123;</span><br><span class="line">        stop = setInterval(function() &#123;</span><br><span class="line">          num = num + 1</span><br><span class="line">          if (num &gt; imgNum - 1) &#123;</span><br><span class="line">            num = 0</span><br><span class="line">          &#125;</span><br><span class="line">          $(&apos;img&apos;)</span><br><span class="line">            .eq(num)</span><br><span class="line">            .addClass(&apos;active&apos;)</span><br><span class="line">            .siblings()</span><br><span class="line">            .removeClass(&apos;active&apos;)</span><br><span class="line">          $(&apos;li&apos;)</span><br><span class="line">            .eq(num)</span><br><span class="line">            .addClass(&apos;change&apos;)</span><br><span class="line">            .siblings()</span><br><span class="line">            .removeClass(&apos;change&apos;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">      &#125;</span><br><span class="line">      run()</span><br><span class="line">      $(&apos;.lunbo&apos;).mouseenter(function() &#123;</span><br><span class="line">        clearInterval(stop)</span><br><span class="line">      &#125;)</span><br><span class="line">      $(&apos;.lunbo&apos;).mouseleave(function() &#123;</span><br><span class="line">        run()</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JQ-轮播图&quot;&gt;&lt;a href=&quot;#JQ-轮播图&quot; class=&quot;headerlink&quot; title=&quot;JQ 轮播图&quot;&gt;&lt;/a&gt;JQ 轮播图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550593881237&amp;di=76955775ab7b210d91dbe6827fb27c24&amp;imgtype=0&amp;src=http%3A%2F%2Fimg95.699pic.com%2Fphoto%2F50051%2F6573.jpg_wh860.jpg&quot; width=&quot;300&quot; hegiht=&quot;100&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="轮播图" scheme="http://yoursite.com/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>javaScript  原生JS 基础</title>
    <link href="http://yoursite.com/2019/02/26/javaScript/"/>
    <id>http://yoursite.com/2019/02/26/javaScript/</id>
    <published>2019-02-26T05:43:46.000Z</published>
    <updated>2020-01-20T03:13:18.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&#160; &#160; &#160; &#160;<strong>JavaScript 是一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。现在 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</strong><br><strong>JavaScript 是 Web 的编程语言，是前端开发必须掌握的三门语言之一，即：</strong></p><ol><li>HTML 定义了网页的内容</li><li>CSS 描述了网页的布局</li><li><p>JavaScript 实现了网页的行为</p><a id="more"></a></li></ol><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>语句：JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。</li><li>表达式：指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</li><li>标识符：指的是用来识别各种值的合法名称，最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以 a 和 A 是两个不同的标识符。<br><strong>JavaScript 有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</strong></li><li>区块：JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如 for、if、while、function 等。</li><li>条件语句：JavaScript 提供 if 结构和 switch 结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。</li><li>typeof 运算符<br>JavaScript 有三种方法，可以确定一个值到底是什么类型。<br>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString 方法</li><li>null 和 undefined 区别是这样的：null 是一个表示“空”的对象，转为数值时为 0；undefined 是一个表示”此处无定义”的原始值，转为数值时为 NaN。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">下面是返回<span class="literal">undefined</span>的经典场景;</span><br><span class="line"><span class="comment">// 变量声明了，但没有赋值</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象没有赋值的属性</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.p; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值时，默认返回 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">f(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="8"><li>false：转换规则是除了下面六个值被转为 false，其他值都视为 true。<br>undefined<br>null<br>false<br>0<br>NaN<br>“”或’’（空字符串）<br><strong>布尔值往往用于程序流程的控制，注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。</strong></li><li>数值精度：根据国际标准 IEEE 754，JavaScript 浮点数的 64 个二进制位，从最左边开始，是这样组成的。<br>第 1 位：符号位，0 表示正数，1 表示负数<br>第 2 位到第 12 位（共 11 位）：指数部分<br>第 13 位到第 64 位（共 52 位）：小数部分（即有效数字）</li><li>NAN：NaN 是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。<br><strong>需要注意的是，NaN 不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于 Number，使用 typeof 运算符可以看得很清楚。NaN 不等于任何值，包括它本身。</strong></li></ol><h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 变量对象</span></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">a</span>: <span class="number">10</span> &#125;; <span class="comment">// 变量b存在于变量对象中，&#123;a: 10&#125; 作为对象存在于堆内存中</span></span><br></pre></td></tr></table></figure><p><img src="/assets/img/变量对象.png" alt="avatar"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>分两种一种是基本类型，一种是引用类型</p><p><code>基本类型就是基础数据类型 ,引用类型就是复杂数据类型obj及其引申出的</code><br>基本类型：在内存中占据实际大小的空间，赋值的时候，会在内存中创建一份新的副本。<br>引用类型：指向对象的指针而不是对象本身，赋值的时候，只是创建了一个新的指针指向对象。<br>确定一个变量是哪种基本类型用 typeof 操作符。<br>确定一个变量是哪种引用类型用 instanceof 操作符。<br><a href="https://www.jianshu.com/p/66f3aef3e131" target="_blank" rel="noopener">参考链接</a></p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="五种基础数据类型"><a href="#五种基础数据类型" class="headerlink" title="五种基础数据类型"></a>五种基础数据类型</h3><ul><li>number</li><li>null</li><li>undefind</li><li>string</li><li>boolean</li></ul><h3 id="一种复杂数据类型"><a href="#一种复杂数据类型" class="headerlink" title="一种复杂数据类型"></a>一种复杂数据类型</h3><ul><li>object</li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h5 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h5><p><strong>由于空位的处理规则非常不统一，所以建议避免出现空位。</strong></p><ol><li>push(要添加的元素) 向数组内部的最后添加的元素，原来的数组不变，该方法返回新数组的长度</li><li>unshift() 向数组前面添加元素，原来的数组不变，该方法返回新数组的长度</li><li>concat(另一个数组) 将两个数组拼接，原来的数组不变，并返回新得到的数组</li><li>pop() 删除数组中的最后一项，原数组不变，并返回被删除的数组</li><li>shift(添加的元素) 向数组前面删除，原数组不变，并返回被删除的数组</li><li>slice(a,b) 对数组进行截取，从下标 a 开始到 b 结束（包括开始不包括结束），原数组不变，返回被截取的数组，这个方法可以用来做数组的拷贝，这个方法可以只写开始不写结束，意思是从开始直接截取到最后，包括最后一项</li><li>splice(a,b,c) 对数组进行添加和删除 a.代表添加或删除的位置（下标） b.代表删除的个数 c.代表要添加的元素（可以省略） 原数组改变，返回被删除元素组成的数组，没有删除的话返回<a href="空数组"></a></li><li>join(a) 将数组的每一项以 a 作为连接符，拼接成字符串，原数组不变，返回新得到的字符串， a 默认为逗号</li><li>reverse() 将数组数据颠倒，原数组改变，并返回颠倒后的新数组。</li><li>indexOf(要查找的元素),查找数组内是否包含某个元素，如果包含返回第一个匹配的下标，否则返回-1，原数组不会改变（只能针对非对象数组）</li><li>filter() 过滤 将一个数组根据条件生成另一个数组，原数组不变，返回新生成的数组 例：XXX.filter(function<br>(ele,index,array){return 条件}) ele 代表数组中的某一项 index 代表的书该项的下标 array 代表原数组<br><strong>如果数组中的某一项满足条件的话，就放入到新生成的数组内</strong><br>return 的作用：当查找到某一项的时候，只要 return 后面的值为 true，那么新生成的数组内就会添加到该项</li><li>forEach 数组的遍历</li><li>find() 数组的查找，通常使用在对象数组（数组里存放的是对象类型）上 例如：XXX.find(function<br>(ele,index,array){return 条件 xx}) 在数组中查找符合 return 后面条件的第一个元素并返回，原数组不变，查找不到返回 undefined<br><strong>数组 find 方法找到某一个对象，和数组内的某一个对象指向的是同一个地址，我们更改了 find 方法找到的对象，就相当于修改了数组内的对象，也就相当于修改了数组，那么数据就发生了变化，页面因此改变</strong></li><li>findIndex() 查找的是下标，查不到返回-1，跟 find 用法一样</li><li>every() 检测所有元素是否符合条件，符合条件返回 true，不符合返回 false，通常用来查询数组中是否都是同一个元素</li><li>includes() 使用该方法替换 indexOf ,方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的 includes 方法类似。ES2016 引入了该方法。</li><li>sort() 给数组排序 例如：xxx.sort(function(a,b){return a-b（正序）/b-a（倒序）}) a 和 b 代表的是数组相邻的两项 a-b 让相邻两项进行数学运算，如果小于 b 从小到大，反之从大到小， 原数组改变，返回值就是新数组</li><li>数组实例的 entries()，keys() 和 values()<br>keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</li><li>fill(),fill 方法使用给定值，填充一个数组。<br><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7)// [7, 7, 7]</code></li><li>copyWithin(),在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。<br><code>Array.prototype.copyWithin(target, start = 0, end = this.length)</code><br>它接受三个参数。<br>-target（必需）：从该位置开始替换数据。如果为负值，表示倒数。<br>-start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。<br>-end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。<br>这三个参数都应该是数值，如果不是，会自动转为数值。</li><li>Array.from(),Array.from 方法用于将两类对象转为真正的数组</li><li>Array.of(),Array.of 方法用于将一组值，转换为数组。<br><code>Array.of(3, 11, 8) // [3,11,8]</code><br><code>Array.of(3) // [3]</code><br><code>Array.of(3).length // 1</code></li><li>数组实例的 flat()，flatMap(),<br>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。<br>flatMap()方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组。</li><li>reduce()</li><li>some() 检测所有元素是否符合条件，符合条件返回 true，不符合返回 false</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xxx.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">result,ele,ind,array</span>)</span>&#123;rerurn xxx&#125;,<span class="number">0</span>)</span><br><span class="line">result:代表最终结果</span><br><span class="line">ele:代表数组的一项</span><br><span class="line">ind:代表对应下标</span><br><span class="line">最后的<span class="number">0</span>:代表最终结果的初始值，是自己定义的</span><br><span class="line"><span class="function"><span class="keyword">function</span>的大括号内必须填写返回最后的结果</span></span><br><span class="line"><span class="function"><span class="title">return</span> 有一个额外的意思，就是当做下一次遍历数组的初始值</span></span><br><span class="line"><span class="function">最后一次的<span class="title">return</span> 就是<span class="title">result</span>函数的返回值</span></span><br><span class="line"><span class="function">每一次<span class="title">reduce</span>内部的函数执行完毕后必须有返回值，原数组不变，返回新的值</span></span><br></pre></td></tr></table></figure><ul><li>已知一个数组随机</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length);</span><br><span class="line">  <span class="keyword">const</span> val = arr[num];</span><br><span class="line">  newArr.push(val);</span><br><span class="line">  index--;</span><br><span class="line">  arr.splice(num, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><ul><li>已知一个数组去重</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removal</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">      newArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">53</span>, <span class="number">636</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(removal(arr))</span><br><span class="line"><span class="comment">// function arr(array) &#123;</span></span><br><span class="line"><span class="comment">//   return array.reduce((m, n) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if (m.indexOf(n) == -1) &#123;</span></span><br><span class="line"><span class="comment">//       m.push(n)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     return m</span></span><br><span class="line"><span class="comment">//   &#125;, [])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const array = [1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6 set 方法</span></span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[...new <span class="built_in">Set</span>(array)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(array)])</span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dedupe([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">reduce 用法  用list生成对象</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'谈话通知书'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'被调查人权利义务告知书'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'谈话笔录'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">generatelist</span>(<span class="params">list, frefix</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.reduce(<span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> key = frefix + <span class="string">`<span class="subst">$&#123;c&#125;</span>`</span></span><br><span class="line">          <span class="keyword">const</span> content = &#123;</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            shape: <span class="string">'shape'</span>,</span><br><span class="line">            code: key,</span><br><span class="line">            path: <span class="string">'ssss'</span>,</span><br><span class="line">            text: b.name,</span><br><span class="line">            keyPoint: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            lines:</span><br><span class="line">              c + <span class="number">1</span> &lt; d.length</span><br><span class="line">                ? [</span><br><span class="line">                    &#123;</span><br><span class="line">                      path: <span class="string">'y30|x-150|y27'</span>,</span><br><span class="line">                      hasArrow: <span class="literal">true</span>,</span><br><span class="line">                      next: frefix + <span class="string">`<span class="subst">$&#123;c + <span class="number">1</span>&#125;</span>`</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                : []</span><br><span class="line">          &#125;</span><br><span class="line">          a[key] = content</span><br><span class="line">          <span class="keyword">return</span> a</span><br><span class="line">        &#125;, &#123;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      generatelist(list, <span class="number">99</span>)</span><br></pre></td></tr></table></figure><h5 id="forEach-和-Map-的区别"><a href="#forEach-和-Map-的区别" class="headerlink" title="forEach 和 Map 的区别"></a>forEach 和 Map 的区别</h5><ul><li>forEach 适合于你并不打算改变数据的时候，而只是想用数据做一些事情 – 比如存入数据库或则打印出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="params">letter</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(letter);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// d</span></span><br></pre></td></tr></table></figure><ul><li>map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)来玩出更多的花样。map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)来玩出更多的花样。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>).filter(<span class="function"><span class="params">num</span> =&gt;</span> num &gt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">// arr2 = [6, 8, 10]</span></span><br></pre></td></tr></table></figure><ul><li>核心要点</li></ul><p>能用 forEach()做到的，map()同样可以。反过来也是如此。<br>map()会分配内存空间存储新数组并返回，forEach()不会返回数据。<br>forEach()允许 callback 更改原始数组的元素。map()返回新的数组。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><h5 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h5><p>字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和 split()。</p><ol><li>spilt(a) 将字符串以 a 分割拆分成数组</li><li>charAt(数字) 获取字符串对应数字下标的字符</li><li>join()</li><li>every()</li><li>replace() 替换 用法：replace（”要被替换的字符串”，“替换的字符串”），替换原来的字符串不变，返回新的字符串，只会修改第一个匹配的<br><strong>要被替换的字符串可以写成正则表达式</strong><br><strong>正则表达式//后面可以添加关键字，g 全局匹配，i 字母不区分大小写</strong></li><li>match() 获取字符串中符合正则表达式的所有项（数组形式） 用法：Match(regexp)</li><li>实例方法：includes(), startsWith(), endsWith()<br>-includes()：返回布尔值，表示是否找到了参数字符串。<br>-startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。<br>-endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。<br>这三个方法都支持第二个参数，表示开始搜索的位置。</li><li>repeat() repeat 方法返回一个新字符串，表示将原字符串重复 n 次。<br>参数如果是小数，会被取整。<br>如果 repeat 的参数是负数或者 Infinity，会报错。<br>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat 视同为 0。<br>参数 NaN 等同于 0。<br>如果 repeat 的参数是字符串，则会先转换成数字。</li><li>实例方法：padStart()，padEnd() ;ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。<br>padStart()和 padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</li><li>实例方法：trimStart()，trimEnd()<br>ES2019 对字符串实例新增了 trimStart()和 trimEnd()这两个方法。它们的行为与 trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</li><li>matchAll() matchAll()方法返回一个正则表达式在当前字符串的所有匹配</li></ol><h5 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h5><ul><li>反斜杠（\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">0</span> ：<span class="literal">null</span>（\u0000）</span><br><span class="line">\b ：后退键（\u0008）</span><br><span class="line">\f ：换页符（\u000C）</span><br><span class="line">\n ：换行符（\u000A）</span><br><span class="line">\r ：回车键（\u000D）</span><br><span class="line">\t ：制表符（\u0009）</span><br><span class="line">\v ：垂直制表符（\u000B）</span><br><span class="line">\<span class="string">' ：单引号（\u0027）</span></span><br><span class="line"><span class="string">\" ：双引号（\u0022）</span></span><br><span class="line"><span class="string">\\ ：反斜杠（\u005C）</span></span><br></pre></td></tr></table></figure><h4 id="数学对象"><a href="#数学对象" class="headerlink" title="数学对象"></a>数学对象</h4><ol><li>Math.floor(数) 下舍 把括号内的数字进行下舍并返回结果，原数字不会改变</li><li>Math.ceil(数) 上进</li><li>Math.round(数) 四舍五入</li><li>Math.random() 0-1 的随机数</li><li>Math.max(1,2,3,…) 查找最大值</li><li>Math.min 查找最小值</li><li>Math.PI</li><li>Number.isInteger() Number.isInteger()用来判断一个数值是否为整数。</li><li>Math.trunc() Math.trunc 方法用于去除一个数的小数部分，返回整数部分。<br>对于非数值，Math.trunc 内部使用 Number 方法将其先转为数值。<br>对于空值和无法截取整数的值，返回 NaN。</li><li>Math.sign() 方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。 -参数为正数，返回+1； -参数为负数，返回-1； -参数为 0，返回 0； -参数为-0，返回-0; -其他值，返回 NaN。<br><code>与数值相关的全局方法:</code></li><li>parseInt() parseInt 方法用于将字符串转为整数。<br><code>parseInt(&#39;123&#39;) // 123</code></li><li>parseFloat() parseFloat 方法用于将一个字符串转为浮点数。</li><li>isNaN() isNaN 方法可以用来判断一个值是否为 NaN。</li><li>isFinite() isFinite 方法返回一个布尔值，表示某个值是否为正常的数值。<br>isFinite(Infinity) // false<br>isFinite(-Infinity) // false<br>isFinite(NaN) // false<br>isFinite(undefined) // false<br>isFinite(null) // true<br>isFinite(-1) // true<br><strong>除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。</strong></li><li>Number.isInteger() 方法用来判断给定的参数是否为整数。</li></ol><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="正则表达式的规则"><a href="#正则表达式的规则" class="headerlink" title="正则表达式的规则"></a>正则表达式的规则</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span><span class="number">-9</span>] 一位数字</span><br><span class="line">[a-z] 一位小写字母</span><br><span class="line">[A-Z] 一位大写字母</span><br></pre></td></tr></table></figure><h4 id="数据结构的栈和队列操作"><a href="#数据结构的栈和队列操作" class="headerlink" title="数据结构的栈和队列操作"></a>数据结构的栈和队列操作</h4><p><a href="https://www.cnblogs.com/anniey/p/7127872.html" target="_blank" rel="noopener">参考资料</a></p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>执行上下文就是使用栈</p><ul><li>栈是一种先进后出的数据结构，比如往筒子里放入羽毛球，想要取出来，必须从最后一个开始。<br>数组方法 push()–入栈和 pop()–出栈</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>队列是一种先进先出的数据结构，类似排队 办理业务，先到的先办理，后到的后办理。<br><code>JS为数组提供了方法可以实现队列功能， 入队unshift()、 出队pop()；</code></li></ul><h3 id="闭包的形成需要两个条件"><a href="#闭包的形成需要两个条件" class="headerlink" title="闭包的形成需要两个条件"></a>闭包的形成需要两个条件</h3><ul><li><p>在函数内部创建新的函数</p></li><li><p>新的函数在执行时，访问了函数的变量对象</p></li></ul><h3 id="js-的方法"><a href="#js-的方法" class="headerlink" title="js 的方法"></a>js 的方法</h3><p>为 button 元素添加点击事件。 当用户点击按钮时，在 id=”demo” 的 p 元素上输出 “Hello World” :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="判断语句之：问号判断"><a href="#判断语句之：问号判断" class="headerlink" title="判断语句之：问号判断"></a>判断语句之：问号判断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">两个条件判断：</span><br><span class="line"></span><br><span class="line">enabled == <span class="string">'1'</span>  ?  <span class="string">'是'</span> : <span class="string">'否'</span></span><br><span class="line"></span><br><span class="line">若enabled == <span class="string">'1'</span>成立<span class="string">'是'</span>为真</span><br><span class="line"></span><br><span class="line">三个条件判断：</span><br><span class="line"></span><br><span class="line">enabled == <span class="string">'1'</span>  ?  <span class="string">'已审核'</span> : enabled == <span class="string">'0'</span>  ? <span class="string">'未审核 '</span> ： <span class="string">'已锁定'</span></span><br><span class="line"></span><br><span class="line">若enabled == <span class="string">'1'</span>成立<span class="string">'已审核'</span>为真，否则执行 enabled == <span class="string">'0'</span>  ? <span class="string">'未审核 '</span> ： <span class="string">'已锁定'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;JavaScript 是一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。现在 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;JavaScript 是 Web 的编程语言，是前端开发必须掌握的三门语言之一，即：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML 定义了网页的内容&lt;/li&gt;
&lt;li&gt;CSS 描述了网页的布局&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript 实现了网页的行为&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="原生JS" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%94%9FJS/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 基础</title>
    <link href="http://yoursite.com/2019/02/26/jQuery/"/>
    <id>http://yoursite.com/2019/02/26/jQuery/</id>
    <published>2019-02-26T05:42:29.000Z</published>
    <updated>2019-12-02T11:08:49.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&#160; &#160; &#160; &#160;<strong>如果你了解 JavaScript 语言，那将对你掌握 jQuery 如虎添翼，因为 jQuery 本身就是 JavaScript，只不过是把 JavaScript 代码包装成拿过来就能实现特定功能的代码库！</strong></p><a id="more"></a><h2 id="jQuery-里面的方法"><a href="#jQuery-里面的方法" class="headerlink" title="jQuery 里面的方法"></a>jQuery 里面的方法</h2><ul><li><code>siblings(可以放选择器)</code> 查找同一级别的兄弟元素，不限个数</li><li><code>parent()</code> 查找父级元素（即向上）</li><li><code>find(里面必须写选择器)</code> 查找后代元素</li><li><code>children()</code> 查找所有的子级元素</li><li><code>parents(里面必须写选择器)</code> 查找祖先元素</li><li><code>index()</code> 返回某个人在父级中的位置（也就是属于第几个子集然后数字是从零开始）</li><li><code>next()</code> 找到相邻的下一个兄弟元素</li><li><code>prev()</code> 找到相邻的上一个兄弟元素</li><li><code>eq()</code> 选择器</li><li><code>addClass(&quot;class名&quot;)</code> 添加类名</li><li><code>removeClass(&quot;class名&quot;)</code> 删除类名<br><strong>添加和删除必须一起使用</strong></li><li><code>toggle(&quot;class名&quot;)</code> 替换类名</li><li><code>attr(&quot;属性名&quot;)</code> 获取某个属性对应的属性值</li><li><code>attr(&quot;属性名&quot;，&quot;属性值&quot;)</code> 修改/设置某个属性对应的属性值</li><li><code>html(&quot;属性名&quot;)</code> 获取元素内部的 html 内容</li><li><code>html(&quot;属性名&quot;，&quot;属性值&quot;)</code> 修改/设置某个元素内部的 html 内容<br><strong>heml 的属性 开始标签内部写的东西都称之为属性 （）里可以直接写 html 字符串，html 方法可以将 html、的标签拆成 HTML 标签，但是 text 方法不行</strong></li><li><code>val()</code> 获取 input 输入框内输入的内容</li><li><code>val(“xx”，“xx”)</code> 修改/设置 input 输入框内输入的内容</li><li><code>text()</code> 获取标签内的文本内容</li><li><code>text(“xx”，“xx”)</code> 修改/设置标签内的文本内容</li><li><p><code>trim()</code> 该方法会将一个值的左右两侧的空字符全部去掉<br><strong>空字符：空格、回车、TAB</strong></p></li><li><p><code>scrollTop()</code> 获取滚动条距页面顶部的距离</p></li><li><code>xx.offset().top/left</code> 某个元素距离文档（body）顶部的距离，xx 代表某个 html 元素，xx 位于顶部的距离<br><strong>有了上述值之后，我们解决问题的方案就变成了点击按钮获取对应的 box 距离顶部的距离，将该距离设置成浏览器窗口的滚动条距离顶部的距离</strong></li><li><code>width()</code> 获取宽</li><li><code>height()</code> 获取高</li><li><code>innerwidth()</code> 包括 padding</li><li><code>outwidth</code> 包括 border</li><li><code>trigger(&quot;事件名（例如click）&quot;)</code> 可以模拟其他元素事件触发，可以执行其他元素事件里面执行的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).trigger(<span class="string">"click"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>prop(&quot;checked&quot;)</code> 获取 checkbox 的当前状态，选中得到 true 反之得到 false</li><li><code>removeAttr()</code> 删除该属性</li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><code>show(时间)</code> 消失</li><li><code>hide(时间)</code> 出现</li><li><code>toggle(时间)</code> 切换<br><strong>css 动画会在元素消失出现的时候再次执行</strong></li><li><code>slideUp(时间)</code> 消失</li><li><code>slideDown(时间)</code> 出现</li><li><code>slideToggle(时间)</code> 切换</li><li><code>fadeIn(时间)</code> 消失 渐变</li><li><code>fadeOut(时间)</code> 出现</li><li><code>fadeToggle(时间)</code> 切换</li><li><p><code>fadeTo(时间,透明度)</code> 切换<br><strong>让 div 在 1 秒后变成 0.5 透明度无法用 toggle 切换</strong></p></li><li><p><code>stop()</code>将 stop 之间的动画全部停止</p></li><li><code>delay()</code>将动画延迟执行<br><strong>delay 和 stop 同时使用，stop 放后面</strong></li></ul><h3 id="动画的回调"><a href="#动画的回调" class="headerlink" title="动画的回调"></a>动画的回调</h3><ul><li>所有的 jquery 动画方法，都可以写成回调（当某个动画执行完毕之后想要执行其他的事），jquery 的动画不会影响其他的语句的执行，也就是写在动画的后面的语句不会在动画执行完毕之后再执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.XXX(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;动画执行完毕之后做的事&#125;)</span><br></pre></td></tr></table></figure><h4 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h4><ul><li><strong>jquery 动画当给同一个元素写不同的动画时，不需要写成回调形式，也是先后执行的</strong></li><li>animate（{样式}，时间）回调<br><strong>animate 不能给转换加动画，只能给值是数字的样式加动画</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.animate(&#123;<span class="string">"width"</span>:<span class="string">"100px"</span>&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="绑定一次性的事件"><a href="#绑定一次性的事件" class="headerlink" title="绑定一次性的事件"></a>绑定一次性的事件</h3><ul><li>执行完事件做的事之后给按钮加上：disabled</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><ul><li>one 绑定事件 执行一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).one(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先定义一个全局变量 在事件内判断 修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">0</span></span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    num=<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 off 解绑</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  $(<span class="string">"button"</span>).off(<span class="string">"click"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止-a-的默认跳转行为"><a href="#阻止-a-的默认跳转行为" class="headerlink" title="阻止 a 的默认跳转行为"></a>阻止 a 的默认跳转行为</h3><ol><li>事件内 event.preventDefault()</li><li>事件内最后面加 return false</li><li>标签内 href=”javascript:void(0)”</li><li>标签内 href=”javascript:;”</li></ol><h3 id="dom-操作"><a href="#dom-操作" class="headerlink" title="dom 操作"></a>dom 操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li"</span>)</span><br><span class="line"><span class="comment">//新建li标签</span></span><br><span class="line">$(<span class="string">"&lt;li&gt;"</span>),$(<span class="string">"&lt;button&gt;删除&lt;/button&gt;"</span>)</span><br><span class="line">用 .text()设置标签内的文本内容</span><br><span class="line">或者用.html()设置  这种方法能用模板字符串</span><br><span class="line">xx.remove()</span><br><span class="line"><span class="comment">//删除xx元素</span></span><br><span class="line">父级.append(元素)</span><br><span class="line"><span class="comment">//将后面元素添加到另一个元素内部，当做最后一个子级</span></span><br><span class="line">父级.prepend(元素)</span><br><span class="line"><span class="comment">//将后面元素添加到另一个元素内部，当做第一个子级</span></span><br><span class="line">元素.after(元素)</span><br><span class="line"><span class="comment">//将后面元素添加到前面元素，当做其后一个兄弟</span></span><br><span class="line">元素.before(元素)</span><br><span class="line"><span class="comment">//将后面元素添加到前面元素，当做前面一个兄弟</span></span><br><span class="line">.empty()</span><br><span class="line"><span class="comment">//清空一个标签</span></span><br><span class="line">appendTo(),prepend(),insertAfter(),insertBefore()</span><br><span class="line"><span class="comment">//与上面功能一样，但是使用方法是相反的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;如果你了解 JavaScript 语言，那将对你掌握 jQuery 如虎添翼，因为 jQuery 本身就是 JavaScript，只不过是把 JavaScript 代码包装成拿过来就能实现特定功能的代码库！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS 基础</title>
    <link href="http://yoursite.com/2019/02/26/htmlCss/"/>
    <id>http://yoursite.com/2019/02/26/htmlCss/</id>
    <published>2019-02-26T05:32:59.000Z</published>
    <updated>2020-01-20T03:19:32.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&#160; &#160; &#160; &#160;<strong>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现 HTML（标准通用标记语言的一个应用）或 XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS 不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</strong></p>  <a id="more"></a><h2 id="容易忘"><a href="#容易忘" class="headerlink" title="容易忘"></a>容易忘</h2><ul><li>letter-spacing: 4px; 字符之间的间距</li><li>visibility：hidden 隐藏</li><li>visibility：visible 显示<br><strong>隐藏后仍然占据空间</strong></li><li>vertical-aligh:middle 兄弟元素，兄弟之间居中（行级块）</li><li>width:calc(670px * 5) 计算宽度（兼容性差）</li><li>cursor：auto 箭头</li><li>cdn 指的是加速服务</li><li>script 写在 body 最下方</li><li>meta：vp 移动端 meta 声明</li><li>display:inline 块边行</li><li>vertical-aligh:-2px（可以负数） 垂直方向（用于对齐），必须有行</li><li>text-decoration:none(无)/underline（下划线）/overline（上面）/lin-through(中间删除)</li><li>data-locale 自定义</li><li>:focus 获取焦点（如:hover 这类叫做伪类选择器）权重 10</li><li>box-shadow:水平，垂直，模糊（越大越淡），阴影大小，颜色，inset 阴影</li></ul><h2 id="单文本超出显示三个点"><a href="#单文本超出显示三个点" class="headerlink" title="单文本超出显示三个点"></a>单文本超出显示三个点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;white-space:nowrap; overflow:hidden; text-overflow:ellipsis&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><ol><li>宽度</li><li>不换行</li><li>溢出隐藏 oh</li><li>设置文本超出显示三个点</li></ol><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media screen and(min-width:<span class="number">500</span>px) and (max-width:<span class="number">700</span>px)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指的是500到700</span></span><br></pre></td></tr></table></figure><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h2><h3 id="容器的相关属性"><a href="#容器的相关属性" class="headerlink" title="容器的相关属性"></a>容器的相关属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">justify-content(项目在主轴方向上的对齐方式):center 居中</span><br><span class="line">                                        space-between 第一个最左边，最后一个在最右边，其他间距相同</span><br><span class="line">                                        space-around 左右一倍间距，中间两倍间距</span><br><span class="line">                                        space-evenly 间距相等</span><br><span class="line">                                        flex-start  全靠左</span><br><span class="line">                                        flex-end 全靠右</span><br><span class="line">aligh-items(项目在副轴上的对齐方式):center 居中</span><br><span class="line">                                stretch</span><br><span class="line">                                baseline</span><br><span class="line">flex-direction(规定主轴的方向):row 横</span><br><span class="line">                             row-reverse 横向反向</span><br><span class="line">                             column 竖向</span><br><span class="line">                             column-reverse 竖向反向</span><br><span class="line">flex-wrap(项目在主轴方向排不开可以使用该属性换行): wrap 换行 nowrap 不换行</span><br><span class="line">align-content(多轴线是副轴方向上的对齐方式)</span><br></pre></td></tr></table></figure><h3 id="项目相关的属性"><a href="#项目相关的属性" class="headerlink" title="项目相关的属性"></a>项目相关的属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">order 规定项目的排列顺序，值是数字（默认<span class="number">0</span>），数字越大位置约靠后</span><br><span class="line">flex-grow 规定项目的放大比例，默认是<span class="number">0</span>，即存在剩余空间也不放大，设置为<span class="number">1</span>，即占满剩余空间</span><br><span class="line">flex-shrink 定义了项目的缩小比例，默认为<span class="number">1</span>，即如果空间不足该项目缩小，设置为<span class="number">0</span>，即项目不会缩小</span><br><span class="line">flex-basis 定义了在分配剩余空间之前元素的默认大小。相当于对浏览器提前告知：浏览器兄，我要占据这么大的空间，提前帮我预留好。<span class="string">`flex-basis: &lt;length&gt; | auto; /* 默认值是 auto */`</span></span><br><span class="line">align-self 单个项目的对齐方式，属性允许单个项目在副轴上有与其他项目不一样的对齐方式，可覆盖aligh-items属性</span><br></pre></td></tr></table></figure><p>xxx[] 属性选择器<br>input[placeholder] 即带 placeholder 的 input</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;&lt;strong&gt;层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现 HTML（标准通用标记语言的一个应用）或 XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS 不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
